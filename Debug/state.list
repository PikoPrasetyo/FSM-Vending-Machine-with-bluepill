
state.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eec  08002eec  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002eec  08002eec  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002eec  08002eec  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002eec  08002eec  00012eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002ef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000014  08002f08  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002f08  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac2a  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001974  00000000  00000000  0002ac67  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  0002c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a68  00000000  00000000  0002d120  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014c2b  00000000  00000000  0002db88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008114  00000000  00000000  000427b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00071d04  00000000  00000000  0004a8c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc5cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e5c  00000000  00000000  000bc648  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ca8 	.word	0x08002ca8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08002ca8 	.word	0x08002ca8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4b08      	ldr	r3, [pc, #32]	; (8000198 <HAL_Init+0x28>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a07      	ldr	r2, [pc, #28]	; (8000198 <HAL_Init+0x28>)
 800017a:	f043 0310 	orr.w	r3, r3, #16
 800017e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000180:	2003      	movs	r0, #3
 8000182:	f000 f923 	bl	80003cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f000 f808 	bl	800019c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800018c:	f001 feba 	bl	8001f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40022000 	.word	0x40022000

0800019c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <HAL_InitTick+0x54>)
 80001a6:	681a      	ldr	r2, [r3, #0]
 80001a8:	4b12      	ldr	r3, [pc, #72]	; (80001f4 <HAL_InitTick+0x58>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	4619      	mov	r1, r3
 80001ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80001b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 f93b 	bl	8000436 <HAL_SYSTICK_Config>
 80001c0:	4603      	mov	r3, r0
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d001      	beq.n	80001ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001c6:	2301      	movs	r3, #1
 80001c8:	e00e      	b.n	80001e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	2b0f      	cmp	r3, #15
 80001ce:	d80a      	bhi.n	80001e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001d0:	2200      	movs	r2, #0
 80001d2:	6879      	ldr	r1, [r7, #4]
 80001d4:	f04f 30ff 	mov.w	r0, #4294967295
 80001d8:	f000 f903 	bl	80003e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001dc:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <HAL_InitTick+0x5c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001e2:	2300      	movs	r3, #0
 80001e4:	e000      	b.n	80001e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001e6:	2301      	movs	r3, #1
}
 80001e8:	4618      	mov	r0, r3
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	20000008 	.word	0x20000008
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000000 	.word	0x20000000

080001fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <HAL_IncTick+0x1c>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	461a      	mov	r2, r3
 8000206:	4b05      	ldr	r3, [pc, #20]	; (800021c <HAL_IncTick+0x20>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4413      	add	r3, r2
 800020c:	4a03      	ldr	r2, [pc, #12]	; (800021c <HAL_IncTick+0x20>)
 800020e:	6013      	str	r3, [r2, #0]
}
 8000210:	bf00      	nop
 8000212:	46bd      	mov	sp, r7
 8000214:	bc80      	pop	{r7}
 8000216:	4770      	bx	lr
 8000218:	20000004 	.word	0x20000004
 800021c:	20000030 	.word	0x20000030

08000220 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
  return uwTick;
 8000224:	4b02      	ldr	r3, [pc, #8]	; (8000230 <HAL_GetTick+0x10>)
 8000226:	681b      	ldr	r3, [r3, #0]
}
 8000228:	4618      	mov	r0, r3
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	20000030 	.word	0x20000030

08000234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000234:	b480      	push	{r7}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f003 0307 	and.w	r3, r3, #7
 8000242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <__NVIC_SetPriorityGrouping+0x44>)
 8000246:	68db      	ldr	r3, [r3, #12]
 8000248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800024a:	68ba      	ldr	r2, [r7, #8]
 800024c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000250:	4013      	ands	r3, r2
 8000252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000258:	68bb      	ldr	r3, [r7, #8]
 800025a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800025c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000266:	4a04      	ldr	r2, [pc, #16]	; (8000278 <__NVIC_SetPriorityGrouping+0x44>)
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	60d3      	str	r3, [r2, #12]
}
 800026c:	bf00      	nop
 800026e:	3714      	adds	r7, #20
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000280:	4b04      	ldr	r3, [pc, #16]	; (8000294 <__NVIC_GetPriorityGrouping+0x18>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	0a1b      	lsrs	r3, r3, #8
 8000286:	f003 0307 	and.w	r3, r3, #7
}
 800028a:	4618      	mov	r0, r3
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	db0b      	blt.n	80002c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	f003 021f 	and.w	r2, r3, #31
 80002b0:	4906      	ldr	r1, [pc, #24]	; (80002cc <__NVIC_EnableIRQ+0x34>)
 80002b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002b6:	095b      	lsrs	r3, r3, #5
 80002b8:	2001      	movs	r0, #1
 80002ba:	fa00 f202 	lsl.w	r2, r0, r2
 80002be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002c2:	bf00      	nop
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	e000e100 	.word	0xe000e100

080002d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	6039      	str	r1, [r7, #0]
 80002da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	db0a      	blt.n	80002fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	b2da      	uxtb	r2, r3
 80002e8:	490c      	ldr	r1, [pc, #48]	; (800031c <__NVIC_SetPriority+0x4c>)
 80002ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ee:	0112      	lsls	r2, r2, #4
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	440b      	add	r3, r1
 80002f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f8:	e00a      	b.n	8000310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4908      	ldr	r1, [pc, #32]	; (8000320 <__NVIC_SetPriority+0x50>)
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	f003 030f 	and.w	r3, r3, #15
 8000306:	3b04      	subs	r3, #4
 8000308:	0112      	lsls	r2, r2, #4
 800030a:	b2d2      	uxtb	r2, r2
 800030c:	440b      	add	r3, r1
 800030e:	761a      	strb	r2, [r3, #24]
}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	bc80      	pop	{r7}
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000e100 	.word	0xe000e100
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000324:	b480      	push	{r7}
 8000326:	b089      	sub	sp, #36	; 0x24
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f003 0307 	and.w	r3, r3, #7
 8000336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	f1c3 0307 	rsb	r3, r3, #7
 800033e:	2b04      	cmp	r3, #4
 8000340:	bf28      	it	cs
 8000342:	2304      	movcs	r3, #4
 8000344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000346:	69fb      	ldr	r3, [r7, #28]
 8000348:	3304      	adds	r3, #4
 800034a:	2b06      	cmp	r3, #6
 800034c:	d902      	bls.n	8000354 <NVIC_EncodePriority+0x30>
 800034e:	69fb      	ldr	r3, [r7, #28]
 8000350:	3b03      	subs	r3, #3
 8000352:	e000      	b.n	8000356 <NVIC_EncodePriority+0x32>
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000358:	f04f 32ff 	mov.w	r2, #4294967295
 800035c:	69bb      	ldr	r3, [r7, #24]
 800035e:	fa02 f303 	lsl.w	r3, r2, r3
 8000362:	43da      	mvns	r2, r3
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	401a      	ands	r2, r3
 8000368:	697b      	ldr	r3, [r7, #20]
 800036a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800036c:	f04f 31ff 	mov.w	r1, #4294967295
 8000370:	697b      	ldr	r3, [r7, #20]
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
 8000376:	43d9      	mvns	r1, r3
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800037c:	4313      	orrs	r3, r2
         );
}
 800037e:	4618      	mov	r0, r3
 8000380:	3724      	adds	r7, #36	; 0x24
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3b01      	subs	r3, #1
 8000394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000398:	d301      	bcc.n	800039e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800039a:	2301      	movs	r3, #1
 800039c:	e00f      	b.n	80003be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800039e:	4a0a      	ldr	r2, [pc, #40]	; (80003c8 <SysTick_Config+0x40>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	3b01      	subs	r3, #1
 80003a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003a6:	210f      	movs	r1, #15
 80003a8:	f04f 30ff 	mov.w	r0, #4294967295
 80003ac:	f7ff ff90 	bl	80002d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <SysTick_Config+0x40>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <SysTick_Config+0x40>)
 80003b8:	2207      	movs	r2, #7
 80003ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003bc:	2300      	movs	r3, #0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	e000e010 	.word	0xe000e010

080003cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f7ff ff2d 	bl	8000234 <__NVIC_SetPriorityGrouping>
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}

080003e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b086      	sub	sp, #24
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	4603      	mov	r3, r0
 80003ea:	60b9      	str	r1, [r7, #8]
 80003ec:	607a      	str	r2, [r7, #4]
 80003ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003f0:	2300      	movs	r3, #0
 80003f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003f4:	f7ff ff42 	bl	800027c <__NVIC_GetPriorityGrouping>
 80003f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	68b9      	ldr	r1, [r7, #8]
 80003fe:	6978      	ldr	r0, [r7, #20]
 8000400:	f7ff ff90 	bl	8000324 <NVIC_EncodePriority>
 8000404:	4602      	mov	r2, r0
 8000406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800040a:	4611      	mov	r1, r2
 800040c:	4618      	mov	r0, r3
 800040e:	f7ff ff5f 	bl	80002d0 <__NVIC_SetPriority>
}
 8000412:	bf00      	nop
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}

0800041a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800041a:	b580      	push	{r7, lr}
 800041c:	b082      	sub	sp, #8
 800041e:	af00      	add	r7, sp, #0
 8000420:	4603      	mov	r3, r0
 8000422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ff35 	bl	8000298 <__NVIC_EnableIRQ>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	b082      	sub	sp, #8
 800043a:	af00      	add	r7, sp, #0
 800043c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800043e:	6878      	ldr	r0, [r7, #4]
 8000440:	f7ff ffa2 	bl	8000388 <SysTick_Config>
 8000444:	4603      	mov	r3, r0
}
 8000446:	4618      	mov	r0, r3
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000450:	b480      	push	{r7}
 8000452:	b08b      	sub	sp, #44	; 0x2c
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800045a:	2300      	movs	r3, #0
 800045c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800045e:	2300      	movs	r3, #0
 8000460:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000462:	e127      	b.n	80006b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000464:	2201      	movs	r2, #1
 8000466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000468:	fa02 f303 	lsl.w	r3, r2, r3
 800046c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	69fa      	ldr	r2, [r7, #28]
 8000474:	4013      	ands	r3, r2
 8000476:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000478:	69ba      	ldr	r2, [r7, #24]
 800047a:	69fb      	ldr	r3, [r7, #28]
 800047c:	429a      	cmp	r2, r3
 800047e:	f040 8116 	bne.w	80006ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	685b      	ldr	r3, [r3, #4]
 8000486:	2b12      	cmp	r3, #18
 8000488:	d034      	beq.n	80004f4 <HAL_GPIO_Init+0xa4>
 800048a:	2b12      	cmp	r3, #18
 800048c:	d80d      	bhi.n	80004aa <HAL_GPIO_Init+0x5a>
 800048e:	2b02      	cmp	r3, #2
 8000490:	d02b      	beq.n	80004ea <HAL_GPIO_Init+0x9a>
 8000492:	2b02      	cmp	r3, #2
 8000494:	d804      	bhi.n	80004a0 <HAL_GPIO_Init+0x50>
 8000496:	2b00      	cmp	r3, #0
 8000498:	d031      	beq.n	80004fe <HAL_GPIO_Init+0xae>
 800049a:	2b01      	cmp	r3, #1
 800049c:	d01c      	beq.n	80004d8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800049e:	e048      	b.n	8000532 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d043      	beq.n	800052c <HAL_GPIO_Init+0xdc>
 80004a4:	2b11      	cmp	r3, #17
 80004a6:	d01b      	beq.n	80004e0 <HAL_GPIO_Init+0x90>
          break;
 80004a8:	e043      	b.n	8000532 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004aa:	4a89      	ldr	r2, [pc, #548]	; (80006d0 <HAL_GPIO_Init+0x280>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d026      	beq.n	80004fe <HAL_GPIO_Init+0xae>
 80004b0:	4a87      	ldr	r2, [pc, #540]	; (80006d0 <HAL_GPIO_Init+0x280>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d806      	bhi.n	80004c4 <HAL_GPIO_Init+0x74>
 80004b6:	4a87      	ldr	r2, [pc, #540]	; (80006d4 <HAL_GPIO_Init+0x284>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d020      	beq.n	80004fe <HAL_GPIO_Init+0xae>
 80004bc:	4a86      	ldr	r2, [pc, #536]	; (80006d8 <HAL_GPIO_Init+0x288>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d01d      	beq.n	80004fe <HAL_GPIO_Init+0xae>
          break;
 80004c2:	e036      	b.n	8000532 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80004c4:	4a85      	ldr	r2, [pc, #532]	; (80006dc <HAL_GPIO_Init+0x28c>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d019      	beq.n	80004fe <HAL_GPIO_Init+0xae>
 80004ca:	4a85      	ldr	r2, [pc, #532]	; (80006e0 <HAL_GPIO_Init+0x290>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d016      	beq.n	80004fe <HAL_GPIO_Init+0xae>
 80004d0:	4a84      	ldr	r2, [pc, #528]	; (80006e4 <HAL_GPIO_Init+0x294>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d013      	beq.n	80004fe <HAL_GPIO_Init+0xae>
          break;
 80004d6:	e02c      	b.n	8000532 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	623b      	str	r3, [r7, #32]
          break;
 80004de:	e028      	b.n	8000532 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	3304      	adds	r3, #4
 80004e6:	623b      	str	r3, [r7, #32]
          break;
 80004e8:	e023      	b.n	8000532 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	68db      	ldr	r3, [r3, #12]
 80004ee:	3308      	adds	r3, #8
 80004f0:	623b      	str	r3, [r7, #32]
          break;
 80004f2:	e01e      	b.n	8000532 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	330c      	adds	r3, #12
 80004fa:	623b      	str	r3, [r7, #32]
          break;
 80004fc:	e019      	b.n	8000532 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d102      	bne.n	800050c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000506:	2304      	movs	r3, #4
 8000508:	623b      	str	r3, [r7, #32]
          break;
 800050a:	e012      	b.n	8000532 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d105      	bne.n	8000520 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000514:	2308      	movs	r3, #8
 8000516:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	69fa      	ldr	r2, [r7, #28]
 800051c:	611a      	str	r2, [r3, #16]
          break;
 800051e:	e008      	b.n	8000532 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000520:	2308      	movs	r3, #8
 8000522:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	69fa      	ldr	r2, [r7, #28]
 8000528:	615a      	str	r2, [r3, #20]
          break;
 800052a:	e002      	b.n	8000532 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800052c:	2300      	movs	r3, #0
 800052e:	623b      	str	r3, [r7, #32]
          break;
 8000530:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	2bff      	cmp	r3, #255	; 0xff
 8000536:	d801      	bhi.n	800053c <HAL_GPIO_Init+0xec>
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	e001      	b.n	8000540 <HAL_GPIO_Init+0xf0>
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3304      	adds	r3, #4
 8000540:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000542:	69bb      	ldr	r3, [r7, #24]
 8000544:	2bff      	cmp	r3, #255	; 0xff
 8000546:	d802      	bhi.n	800054e <HAL_GPIO_Init+0xfe>
 8000548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	e002      	b.n	8000554 <HAL_GPIO_Init+0x104>
 800054e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000550:	3b08      	subs	r3, #8
 8000552:	009b      	lsls	r3, r3, #2
 8000554:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	210f      	movs	r1, #15
 800055c:	693b      	ldr	r3, [r7, #16]
 800055e:	fa01 f303 	lsl.w	r3, r1, r3
 8000562:	43db      	mvns	r3, r3
 8000564:	401a      	ands	r2, r3
 8000566:	6a39      	ldr	r1, [r7, #32]
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	fa01 f303 	lsl.w	r3, r1, r3
 800056e:	431a      	orrs	r2, r3
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	685b      	ldr	r3, [r3, #4]
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	2b00      	cmp	r3, #0
 800057e:	f000 8096 	beq.w	80006ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000582:	4b59      	ldr	r3, [pc, #356]	; (80006e8 <HAL_GPIO_Init+0x298>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a58      	ldr	r2, [pc, #352]	; (80006e8 <HAL_GPIO_Init+0x298>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <HAL_GPIO_Init+0x298>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800059a:	4a54      	ldr	r2, [pc, #336]	; (80006ec <HAL_GPIO_Init+0x29c>)
 800059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800059e:	089b      	lsrs	r3, r3, #2
 80005a0:	3302      	adds	r3, #2
 80005a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005aa:	f003 0303 	and.w	r3, r3, #3
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	220f      	movs	r2, #15
 80005b2:	fa02 f303 	lsl.w	r3, r2, r3
 80005b6:	43db      	mvns	r3, r3
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	4013      	ands	r3, r2
 80005bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a4b      	ldr	r2, [pc, #300]	; (80006f0 <HAL_GPIO_Init+0x2a0>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d013      	beq.n	80005ee <HAL_GPIO_Init+0x19e>
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	4a4a      	ldr	r2, [pc, #296]	; (80006f4 <HAL_GPIO_Init+0x2a4>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d00d      	beq.n	80005ea <HAL_GPIO_Init+0x19a>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a49      	ldr	r2, [pc, #292]	; (80006f8 <HAL_GPIO_Init+0x2a8>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d007      	beq.n	80005e6 <HAL_GPIO_Init+0x196>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a48      	ldr	r2, [pc, #288]	; (80006fc <HAL_GPIO_Init+0x2ac>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d101      	bne.n	80005e2 <HAL_GPIO_Init+0x192>
 80005de:	2303      	movs	r3, #3
 80005e0:	e006      	b.n	80005f0 <HAL_GPIO_Init+0x1a0>
 80005e2:	2304      	movs	r3, #4
 80005e4:	e004      	b.n	80005f0 <HAL_GPIO_Init+0x1a0>
 80005e6:	2302      	movs	r3, #2
 80005e8:	e002      	b.n	80005f0 <HAL_GPIO_Init+0x1a0>
 80005ea:	2301      	movs	r3, #1
 80005ec:	e000      	b.n	80005f0 <HAL_GPIO_Init+0x1a0>
 80005ee:	2300      	movs	r3, #0
 80005f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005f2:	f002 0203 	and.w	r2, r2, #3
 80005f6:	0092      	lsls	r2, r2, #2
 80005f8:	4093      	lsls	r3, r2
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000600:	493a      	ldr	r1, [pc, #232]	; (80006ec <HAL_GPIO_Init+0x29c>)
 8000602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000604:	089b      	lsrs	r3, r3, #2
 8000606:	3302      	adds	r3, #2
 8000608:	68fa      	ldr	r2, [r7, #12]
 800060a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000616:	2b00      	cmp	r3, #0
 8000618:	d006      	beq.n	8000628 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800061a:	4b39      	ldr	r3, [pc, #228]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	4938      	ldr	r1, [pc, #224]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 8000620:	69bb      	ldr	r3, [r7, #24]
 8000622:	4313      	orrs	r3, r2
 8000624:	600b      	str	r3, [r1, #0]
 8000626:	e006      	b.n	8000636 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000628:	4b35      	ldr	r3, [pc, #212]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	43db      	mvns	r3, r3
 8000630:	4933      	ldr	r1, [pc, #204]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063e:	2b00      	cmp	r3, #0
 8000640:	d006      	beq.n	8000650 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000642:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	492e      	ldr	r1, [pc, #184]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	4313      	orrs	r3, r2
 800064c:	604b      	str	r3, [r1, #4]
 800064e:	e006      	b.n	800065e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000650:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 8000652:	685a      	ldr	r2, [r3, #4]
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	43db      	mvns	r3, r3
 8000658:	4929      	ldr	r1, [pc, #164]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 800065a:	4013      	ands	r3, r2
 800065c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000666:	2b00      	cmp	r3, #0
 8000668:	d006      	beq.n	8000678 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 800066c:	689a      	ldr	r2, [r3, #8]
 800066e:	4924      	ldr	r1, [pc, #144]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	4313      	orrs	r3, r2
 8000674:	608b      	str	r3, [r1, #8]
 8000676:	e006      	b.n	8000686 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000678:	4b21      	ldr	r3, [pc, #132]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 800067a:	689a      	ldr	r2, [r3, #8]
 800067c:	69bb      	ldr	r3, [r7, #24]
 800067e:	43db      	mvns	r3, r3
 8000680:	491f      	ldr	r1, [pc, #124]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 8000682:	4013      	ands	r3, r2
 8000684:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800068e:	2b00      	cmp	r3, #0
 8000690:	d006      	beq.n	80006a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000692:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 8000694:	68da      	ldr	r2, [r3, #12]
 8000696:	491a      	ldr	r1, [pc, #104]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	4313      	orrs	r3, r2
 800069c:	60cb      	str	r3, [r1, #12]
 800069e:	e006      	b.n	80006ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 80006a2:	68da      	ldr	r2, [r3, #12]
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	43db      	mvns	r3, r3
 80006a8:	4915      	ldr	r1, [pc, #84]	; (8000700 <HAL_GPIO_Init+0x2b0>)
 80006aa:	4013      	ands	r3, r2
 80006ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b0:	3301      	adds	r3, #1
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ba:	fa22 f303 	lsr.w	r3, r2, r3
 80006be:	2b00      	cmp	r3, #0
 80006c0:	f47f aed0 	bne.w	8000464 <HAL_GPIO_Init+0x14>
  }
}
 80006c4:	bf00      	nop
 80006c6:	372c      	adds	r7, #44	; 0x2c
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	10210000 	.word	0x10210000
 80006d4:	10110000 	.word	0x10110000
 80006d8:	10120000 	.word	0x10120000
 80006dc:	10310000 	.word	0x10310000
 80006e0:	10320000 	.word	0x10320000
 80006e4:	10220000 	.word	0x10220000
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010000 	.word	0x40010000
 80006f0:	40010800 	.word	0x40010800
 80006f4:	40010c00 	.word	0x40010c00
 80006f8:	40011000 	.word	0x40011000
 80006fc:	40011400 	.word	0x40011400
 8000700:	40010400 	.word	0x40010400

08000704 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	460b      	mov	r3, r1
 800070e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	689a      	ldr	r2, [r3, #8]
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	4013      	ands	r3, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800071c:	2301      	movs	r3, #1
 800071e:	73fb      	strb	r3, [r7, #15]
 8000720:	e001      	b.n	8000726 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000722:	2300      	movs	r3, #0
 8000724:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000726:	7bfb      	ldrb	r3, [r7, #15]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	807b      	strh	r3, [r7, #2]
 800073e:	4613      	mov	r3, r2
 8000740:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000742:	787b      	ldrb	r3, [r7, #1]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000748:	887a      	ldrh	r2, [r7, #2]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800074e:	e003      	b.n	8000758 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000750:	887b      	ldrh	r3, [r7, #2]
 8000752:	041a      	lsls	r2, r3, #16
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	611a      	str	r2, [r3, #16]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
	...

08000764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d101      	bne.n	8000776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e26c      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	2b00      	cmp	r3, #0
 8000780:	f000 8087 	beq.w	8000892 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000784:	4b92      	ldr	r3, [pc, #584]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	f003 030c 	and.w	r3, r3, #12
 800078c:	2b04      	cmp	r3, #4
 800078e:	d00c      	beq.n	80007aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000790:	4b8f      	ldr	r3, [pc, #572]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f003 030c 	and.w	r3, r3, #12
 8000798:	2b08      	cmp	r3, #8
 800079a:	d112      	bne.n	80007c2 <HAL_RCC_OscConfig+0x5e>
 800079c:	4b8c      	ldr	r3, [pc, #560]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007a8:	d10b      	bne.n	80007c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007aa:	4b89      	ldr	r3, [pc, #548]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d06c      	beq.n	8000890 <HAL_RCC_OscConfig+0x12c>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d168      	bne.n	8000890 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e246      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007ca:	d106      	bne.n	80007da <HAL_RCC_OscConfig+0x76>
 80007cc:	4b80      	ldr	r3, [pc, #512]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a7f      	ldr	r2, [pc, #508]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80007d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	e02e      	b.n	8000838 <HAL_RCC_OscConfig+0xd4>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d10c      	bne.n	80007fc <HAL_RCC_OscConfig+0x98>
 80007e2:	4b7b      	ldr	r3, [pc, #492]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a7a      	ldr	r2, [pc, #488]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80007e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ec:	6013      	str	r3, [r2, #0]
 80007ee:	4b78      	ldr	r3, [pc, #480]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4a77      	ldr	r2, [pc, #476]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80007f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	e01d      	b.n	8000838 <HAL_RCC_OscConfig+0xd4>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000804:	d10c      	bne.n	8000820 <HAL_RCC_OscConfig+0xbc>
 8000806:	4b72      	ldr	r3, [pc, #456]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a71      	ldr	r2, [pc, #452]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 800080c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	4b6f      	ldr	r3, [pc, #444]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a6e      	ldr	r2, [pc, #440]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 8000818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800081c:	6013      	str	r3, [r2, #0]
 800081e:	e00b      	b.n	8000838 <HAL_RCC_OscConfig+0xd4>
 8000820:	4b6b      	ldr	r3, [pc, #428]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a6a      	ldr	r2, [pc, #424]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 8000826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b68      	ldr	r3, [pc, #416]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a67      	ldr	r2, [pc, #412]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 8000832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000836:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d013      	beq.n	8000868 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000840:	f7ff fcee 	bl	8000220 <HAL_GetTick>
 8000844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000846:	e008      	b.n	800085a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000848:	f7ff fcea 	bl	8000220 <HAL_GetTick>
 800084c:	4602      	mov	r2, r0
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	2b64      	cmp	r3, #100	; 0x64
 8000854:	d901      	bls.n	800085a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000856:	2303      	movs	r3, #3
 8000858:	e1fa      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800085a:	4b5d      	ldr	r3, [pc, #372]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0f0      	beq.n	8000848 <HAL_RCC_OscConfig+0xe4>
 8000866:	e014      	b.n	8000892 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000868:	f7ff fcda 	bl	8000220 <HAL_GetTick>
 800086c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800086e:	e008      	b.n	8000882 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000870:	f7ff fcd6 	bl	8000220 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	2b64      	cmp	r3, #100	; 0x64
 800087c:	d901      	bls.n	8000882 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800087e:	2303      	movs	r3, #3
 8000880:	e1e6      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000882:	4b53      	ldr	r3, [pc, #332]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1f0      	bne.n	8000870 <HAL_RCC_OscConfig+0x10c>
 800088e:	e000      	b.n	8000892 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	2b00      	cmp	r3, #0
 800089c:	d063      	beq.n	8000966 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800089e:	4b4c      	ldr	r3, [pc, #304]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f003 030c 	and.w	r3, r3, #12
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00b      	beq.n	80008c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80008aa:	4b49      	ldr	r3, [pc, #292]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f003 030c 	and.w	r3, r3, #12
 80008b2:	2b08      	cmp	r3, #8
 80008b4:	d11c      	bne.n	80008f0 <HAL_RCC_OscConfig+0x18c>
 80008b6:	4b46      	ldr	r3, [pc, #280]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d116      	bne.n	80008f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008c2:	4b43      	ldr	r3, [pc, #268]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d005      	beq.n	80008da <HAL_RCC_OscConfig+0x176>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d001      	beq.n	80008da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e1ba      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008da:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	695b      	ldr	r3, [r3, #20]
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	4939      	ldr	r1, [pc, #228]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 80008ea:	4313      	orrs	r3, r2
 80008ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008ee:	e03a      	b.n	8000966 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691b      	ldr	r3, [r3, #16]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d020      	beq.n	800093a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008f8:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <HAL_RCC_OscConfig+0x270>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008fe:	f7ff fc8f 	bl	8000220 <HAL_GetTick>
 8000902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000904:	e008      	b.n	8000918 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000906:	f7ff fc8b 	bl	8000220 <HAL_GetTick>
 800090a:	4602      	mov	r2, r0
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	2b02      	cmp	r3, #2
 8000912:	d901      	bls.n	8000918 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000914:	2303      	movs	r3, #3
 8000916:	e19b      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000918:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	2b00      	cmp	r3, #0
 8000922:	d0f0      	beq.n	8000906 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000924:	4b2a      	ldr	r3, [pc, #168]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	4927      	ldr	r1, [pc, #156]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 8000934:	4313      	orrs	r3, r2
 8000936:	600b      	str	r3, [r1, #0]
 8000938:	e015      	b.n	8000966 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <HAL_RCC_OscConfig+0x270>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000940:	f7ff fc6e 	bl	8000220 <HAL_GetTick>
 8000944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000946:	e008      	b.n	800095a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000948:	f7ff fc6a 	bl	8000220 <HAL_GetTick>
 800094c:	4602      	mov	r2, r0
 800094e:	693b      	ldr	r3, [r7, #16]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	2b02      	cmp	r3, #2
 8000954:	d901      	bls.n	800095a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000956:	2303      	movs	r3, #3
 8000958:	e17a      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800095a:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	2b00      	cmp	r3, #0
 8000964:	d1f0      	bne.n	8000948 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f003 0308 	and.w	r3, r3, #8
 800096e:	2b00      	cmp	r3, #0
 8000970:	d03a      	beq.n	80009e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d019      	beq.n	80009ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800097a:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <HAL_RCC_OscConfig+0x274>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000980:	f7ff fc4e 	bl	8000220 <HAL_GetTick>
 8000984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000986:	e008      	b.n	800099a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000988:	f7ff fc4a 	bl	8000220 <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	2b02      	cmp	r3, #2
 8000994:	d901      	bls.n	800099a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000996:	2303      	movs	r3, #3
 8000998:	e15a      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_RCC_OscConfig+0x26c>)
 800099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0f0      	beq.n	8000988 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f000 fada 	bl	8000f60 <RCC_Delay>
 80009ac:	e01c      	b.n	80009e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_RCC_OscConfig+0x274>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009b4:	f7ff fc34 	bl	8000220 <HAL_GetTick>
 80009b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009ba:	e00f      	b.n	80009dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80009bc:	f7ff fc30 	bl	8000220 <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d908      	bls.n	80009dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80009ca:	2303      	movs	r3, #3
 80009cc:	e140      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	42420000 	.word	0x42420000
 80009d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009dc:	4b9e      	ldr	r3, [pc, #632]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 80009de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1e9      	bne.n	80009bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 0304 	and.w	r3, r3, #4
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	f000 80a6 	beq.w	8000b42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009fa:	4b97      	ldr	r3, [pc, #604]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10d      	bne.n	8000a22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b94      	ldr	r3, [pc, #592]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a93      	ldr	r2, [pc, #588]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b91      	ldr	r3, [pc, #580]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a22:	4b8e      	ldr	r3, [pc, #568]	; (8000c5c <HAL_RCC_OscConfig+0x4f8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d118      	bne.n	8000a60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a2e:	4b8b      	ldr	r3, [pc, #556]	; (8000c5c <HAL_RCC_OscConfig+0x4f8>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a8a      	ldr	r2, [pc, #552]	; (8000c5c <HAL_RCC_OscConfig+0x4f8>)
 8000a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000a3a:	f7ff fbf1 	bl	8000220 <HAL_GetTick>
 8000a3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a40:	e008      	b.n	8000a54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a42:	f7ff fbed 	bl	8000220 <HAL_GetTick>
 8000a46:	4602      	mov	r2, r0
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	2b64      	cmp	r3, #100	; 0x64
 8000a4e:	d901      	bls.n	8000a54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000a50:	2303      	movs	r3, #3
 8000a52:	e0fd      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a54:	4b81      	ldr	r3, [pc, #516]	; (8000c5c <HAL_RCC_OscConfig+0x4f8>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d0f0      	beq.n	8000a42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d106      	bne.n	8000a76 <HAL_RCC_OscConfig+0x312>
 8000a68:	4b7b      	ldr	r3, [pc, #492]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000a6a:	6a1b      	ldr	r3, [r3, #32]
 8000a6c:	4a7a      	ldr	r2, [pc, #488]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6213      	str	r3, [r2, #32]
 8000a74:	e02d      	b.n	8000ad2 <HAL_RCC_OscConfig+0x36e>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10c      	bne.n	8000a98 <HAL_RCC_OscConfig+0x334>
 8000a7e:	4b76      	ldr	r3, [pc, #472]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000a80:	6a1b      	ldr	r3, [r3, #32]
 8000a82:	4a75      	ldr	r2, [pc, #468]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000a84:	f023 0301 	bic.w	r3, r3, #1
 8000a88:	6213      	str	r3, [r2, #32]
 8000a8a:	4b73      	ldr	r3, [pc, #460]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	4a72      	ldr	r2, [pc, #456]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000a90:	f023 0304 	bic.w	r3, r3, #4
 8000a94:	6213      	str	r3, [r2, #32]
 8000a96:	e01c      	b.n	8000ad2 <HAL_RCC_OscConfig+0x36e>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	2b05      	cmp	r3, #5
 8000a9e:	d10c      	bne.n	8000aba <HAL_RCC_OscConfig+0x356>
 8000aa0:	4b6d      	ldr	r3, [pc, #436]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000aa2:	6a1b      	ldr	r3, [r3, #32]
 8000aa4:	4a6c      	ldr	r2, [pc, #432]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6213      	str	r3, [r2, #32]
 8000aac:	4b6a      	ldr	r3, [pc, #424]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000aae:	6a1b      	ldr	r3, [r3, #32]
 8000ab0:	4a69      	ldr	r2, [pc, #420]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6213      	str	r3, [r2, #32]
 8000ab8:	e00b      	b.n	8000ad2 <HAL_RCC_OscConfig+0x36e>
 8000aba:	4b67      	ldr	r3, [pc, #412]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	4a66      	ldr	r2, [pc, #408]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000ac0:	f023 0301 	bic.w	r3, r3, #1
 8000ac4:	6213      	str	r3, [r2, #32]
 8000ac6:	4b64      	ldr	r3, [pc, #400]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000ac8:	6a1b      	ldr	r3, [r3, #32]
 8000aca:	4a63      	ldr	r2, [pc, #396]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000acc:	f023 0304 	bic.w	r3, r3, #4
 8000ad0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d015      	beq.n	8000b06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ada:	f7ff fba1 	bl	8000220 <HAL_GetTick>
 8000ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae0:	e00a      	b.n	8000af8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ae2:	f7ff fb9d 	bl	8000220 <HAL_GetTick>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d901      	bls.n	8000af8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000af4:	2303      	movs	r3, #3
 8000af6:	e0ab      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000af8:	4b57      	ldr	r3, [pc, #348]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000afa:	6a1b      	ldr	r3, [r3, #32]
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d0ee      	beq.n	8000ae2 <HAL_RCC_OscConfig+0x37e>
 8000b04:	e014      	b.n	8000b30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b06:	f7ff fb8b 	bl	8000220 <HAL_GetTick>
 8000b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b0c:	e00a      	b.n	8000b24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000b0e:	f7ff fb87 	bl	8000220 <HAL_GetTick>
 8000b12:	4602      	mov	r2, r0
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d901      	bls.n	8000b24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000b20:	2303      	movs	r3, #3
 8000b22:	e095      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b24:	4b4c      	ldr	r3, [pc, #304]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1ee      	bne.n	8000b0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000b30:	7dfb      	ldrb	r3, [r7, #23]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d105      	bne.n	8000b42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b36:	4b48      	ldr	r3, [pc, #288]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	4a47      	ldr	r2, [pc, #284]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000b3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 8081 	beq.w	8000c4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b4c:	4b42      	ldr	r3, [pc, #264]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 030c 	and.w	r3, r3, #12
 8000b54:	2b08      	cmp	r3, #8
 8000b56:	d061      	beq.n	8000c1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	69db      	ldr	r3, [r3, #28]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d146      	bne.n	8000bee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b60:	4b3f      	ldr	r3, [pc, #252]	; (8000c60 <HAL_RCC_OscConfig+0x4fc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b66:	f7ff fb5b 	bl	8000220 <HAL_GetTick>
 8000b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b6c:	e008      	b.n	8000b80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000b6e:	f7ff fb57 	bl	8000220 <HAL_GetTick>
 8000b72:	4602      	mov	r2, r0
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	1ad3      	subs	r3, r2, r3
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d901      	bls.n	8000b80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	e067      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b80:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1f0      	bne.n	8000b6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6a1b      	ldr	r3, [r3, #32]
 8000b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b94:	d108      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000b96:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	492d      	ldr	r1, [pc, #180]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ba8:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a19      	ldr	r1, [r3, #32]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb8:	430b      	orrs	r3, r1
 8000bba:	4927      	ldr	r1, [pc, #156]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000bc0:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <HAL_RCC_OscConfig+0x4fc>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc6:	f7ff fb2b 	bl	8000220 <HAL_GetTick>
 8000bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bcc:	e008      	b.n	8000be0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bce:	f7ff fb27 	bl	8000220 <HAL_GetTick>
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d901      	bls.n	8000be0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e037      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0f0      	beq.n	8000bce <HAL_RCC_OscConfig+0x46a>
 8000bec:	e02f      	b.n	8000c4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <HAL_RCC_OscConfig+0x4fc>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fb14 	bl	8000220 <HAL_GetTick>
 8000bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bfa:	e008      	b.n	8000c0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000bfc:	f7ff fb10 	bl	8000220 <HAL_GetTick>
 8000c00:	4602      	mov	r2, r0
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d901      	bls.n	8000c0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	e020      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d1f0      	bne.n	8000bfc <HAL_RCC_OscConfig+0x498>
 8000c1a:	e018      	b.n	8000c4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d101      	bne.n	8000c28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e013      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_RCC_OscConfig+0x4f4>)
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6a1b      	ldr	r3, [r3, #32]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d106      	bne.n	8000c4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d001      	beq.n	8000c4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40007000 	.word	0x40007000
 8000c60:	42420060 	.word	0x42420060

08000c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e0d0      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000c78:	4b6a      	ldr	r3, [pc, #424]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d910      	bls.n	8000ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c86:	4b67      	ldr	r3, [pc, #412]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f023 0207 	bic.w	r2, r3, #7
 8000c8e:	4965      	ldr	r1, [pc, #404]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c96:	4b63      	ldr	r3, [pc, #396]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	683a      	ldr	r2, [r7, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d001      	beq.n	8000ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	e0b8      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0302 	and.w	r3, r3, #2
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d020      	beq.n	8000cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d005      	beq.n	8000ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cc0:	4b59      	ldr	r3, [pc, #356]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	4a58      	ldr	r2, [pc, #352]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d005      	beq.n	8000ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cd8:	4b53      	ldr	r3, [pc, #332]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	4a52      	ldr	r2, [pc, #328]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ce4:	4b50      	ldr	r3, [pc, #320]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	494d      	ldr	r1, [pc, #308]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d040      	beq.n	8000d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d107      	bne.n	8000d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0a:	4b47      	ldr	r3, [pc, #284]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d115      	bne.n	8000d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e07f      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d107      	bne.n	8000d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d22:	4b41      	ldr	r3, [pc, #260]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d109      	bne.n	8000d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e073      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d32:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e06b      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d42:	4b39      	ldr	r3, [pc, #228]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f023 0203 	bic.w	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	4936      	ldr	r1, [pc, #216]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d54:	f7ff fa64 	bl	8000220 <HAL_GetTick>
 8000d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d5a:	e00a      	b.n	8000d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d5c:	f7ff fa60 	bl	8000220 <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e053      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d72:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 020c 	and.w	r2, r3, #12
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d1eb      	bne.n	8000d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000d84:	4b27      	ldr	r3, [pc, #156]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d210      	bcs.n	8000db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f023 0207 	bic.w	r2, r3, #7
 8000d9a:	4922      	ldr	r1, [pc, #136]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <HAL_RCC_ClockConfig+0x1c0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d001      	beq.n	8000db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e032      	b.n	8000e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d008      	beq.n	8000dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dc0:	4b19      	ldr	r3, [pc, #100]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	4916      	ldr	r1, [pc, #88]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0308 	and.w	r3, r3, #8
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d009      	beq.n	8000df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	691b      	ldr	r3, [r3, #16]
 8000dea:	00db      	lsls	r3, r3, #3
 8000dec:	490e      	ldr	r1, [pc, #56]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000dee:	4313      	orrs	r3, r2
 8000df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000df2:	f000 f821 	bl	8000e38 <HAL_RCC_GetSysClockFreq>
 8000df6:	4601      	mov	r1, r0
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_RCC_ClockConfig+0x1c4>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	091b      	lsrs	r3, r3, #4
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_RCC_ClockConfig+0x1c8>)
 8000e04:	5cd3      	ldrb	r3, [r2, r3]
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <HAL_RCC_ClockConfig+0x1cc>)
 8000e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <HAL_RCC_ClockConfig+0x1d0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff f9c2 	bl	800019c <HAL_InitTick>

  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	08002ed4 	.word	0x08002ed4
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000000 	.word	0x20000000

08000e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e38:	b490      	push	{r4, r7}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000e40:	1d3c      	adds	r4, r7, #4
 8000e42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000e48:	4b28      	ldr	r3, [pc, #160]	; (8000eec <HAL_RCC_GetSysClockFreq+0xb4>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8000e62:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d002      	beq.n	8000e78 <HAL_RCC_GetSysClockFreq+0x40>
 8000e72:	2b08      	cmp	r3, #8
 8000e74:	d003      	beq.n	8000e7e <HAL_RCC_GetSysClockFreq+0x46>
 8000e76:	e02d      	b.n	8000ed4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000e7a:	623b      	str	r3, [r7, #32]
      break;
 8000e7c:	e02d      	b.n	8000eda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	0c9b      	lsrs	r3, r3, #18
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e8a:	4413      	add	r3, r2
 8000e8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000e90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d013      	beq.n	8000ec4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	0c5b      	lsrs	r3, r3, #17
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000eaa:	4413      	add	r3, r2
 8000eac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000eb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	4a0f      	ldr	r2, [pc, #60]	; (8000ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000eb6:	fb02 f203 	mul.w	r2, r2, r3
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec2:	e004      	b.n	8000ece <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ec8:	fb02 f303 	mul.w	r3, r2, r3
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	623b      	str	r3, [r7, #32]
      break;
 8000ed2:	e002      	b.n	8000eda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ed6:	623b      	str	r3, [r7, #32]
      break;
 8000ed8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000eda:	6a3b      	ldr	r3, [r7, #32]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bc90      	pop	{r4, r7}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	08002cc0 	.word	0x08002cc0
 8000eec:	08002cd0 	.word	0x08002cd0
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	007a1200 	.word	0x007a1200
 8000ef8:	003d0900 	.word	0x003d0900

08000efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000f00:	4b02      	ldr	r3, [pc, #8]	; (8000f0c <HAL_RCC_GetHCLKFreq+0x10>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	20000008 	.word	0x20000008

08000f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000f14:	f7ff fff2 	bl	8000efc <HAL_RCC_GetHCLKFreq>
 8000f18:	4601      	mov	r1, r0
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	4a03      	ldr	r2, [pc, #12]	; (8000f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f26:	5cd3      	ldrb	r3, [r2, r3]
 8000f28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	08002ee4 	.word	0x08002ee4

08000f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000f3c:	f7ff ffde 	bl	8000efc <HAL_RCC_GetHCLKFreq>
 8000f40:	4601      	mov	r1, r0
 8000f42:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	0adb      	lsrs	r3, r3, #11
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f4e:	5cd3      	ldrb	r3, [r2, r3]
 8000f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	08002ee4 	.word	0x08002ee4

08000f60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000f68:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <RCC_Delay+0x34>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <RCC_Delay+0x38>)
 8000f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f72:	0a5b      	lsrs	r3, r3, #9
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	fb02 f303 	mul.w	r3, r2, r3
 8000f7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8000f7c:	bf00      	nop
  }
  while (Delay --);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1e5a      	subs	r2, r3, #1
 8000f82:	60fa      	str	r2, [r7, #12]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d1f9      	bne.n	8000f7c <RCC_Delay+0x1c>
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	10624dd3 	.word	0x10624dd3

08000f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e01d      	b.n	8000fea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d106      	bne.n	8000fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 ffd0 	bl	8001f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2202      	movs	r2, #2
 8000fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3304      	adds	r3, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4610      	mov	r0, r2
 8000fdc:	f000 fa18 	bl	8001410 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b085      	sub	sp, #20
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68da      	ldr	r2, [r3, #12]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f042 0201 	orr.w	r2, r2, #1
 8001008:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2b06      	cmp	r3, #6
 800101a:	d007      	beq.n	800102c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0201 	orr.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	2b02      	cmp	r3, #2
 800104c:	d122      	bne.n	8001094 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b02      	cmp	r3, #2
 800105a:	d11b      	bne.n	8001094 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f06f 0202 	mvn.w	r2, #2
 8001064:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2201      	movs	r2, #1
 800106a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	f003 0303 	and.w	r3, r3, #3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f9ad 	bl	80013da <HAL_TIM_IC_CaptureCallback>
 8001080:	e005      	b.n	800108e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f9a0 	bl	80013c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f000 f9af 	bl	80013ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	2b04      	cmp	r3, #4
 80010a0:	d122      	bne.n	80010e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	2b04      	cmp	r3, #4
 80010ae:	d11b      	bne.n	80010e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f06f 0204 	mvn.w	r2, #4
 80010b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2202      	movs	r2, #2
 80010be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f983 	bl	80013da <HAL_TIM_IC_CaptureCallback>
 80010d4:	e005      	b.n	80010e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f976 	bl	80013c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f985 	bl	80013ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d122      	bne.n	800113c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b08      	cmp	r3, #8
 8001102:	d11b      	bne.n	800113c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f06f 0208 	mvn.w	r2, #8
 800110c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2204      	movs	r2, #4
 8001112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f959 	bl	80013da <HAL_TIM_IC_CaptureCallback>
 8001128:	e005      	b.n	8001136 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f94c 	bl	80013c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f95b 	bl	80013ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	2b10      	cmp	r3, #16
 8001148:	d122      	bne.n	8001190 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	f003 0310 	and.w	r3, r3, #16
 8001154:	2b10      	cmp	r3, #16
 8001156:	d11b      	bne.n	8001190 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f06f 0210 	mvn.w	r2, #16
 8001160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2208      	movs	r2, #8
 8001166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f92f 	bl	80013da <HAL_TIM_IC_CaptureCallback>
 800117c:	e005      	b.n	800118a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f922 	bl	80013c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f931 	bl	80013ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	691b      	ldr	r3, [r3, #16]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b01      	cmp	r3, #1
 800119c:	d10e      	bne.n	80011bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d107      	bne.n	80011bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f06f 0201 	mvn.w	r2, #1
 80011b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 f8fd 	bl	80013b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	2b80      	cmp	r3, #128	; 0x80
 80011c8:	d10e      	bne.n	80011e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d4:	2b80      	cmp	r3, #128	; 0x80
 80011d6:	d107      	bne.n	80011e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80011e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 fa59 	bl	800169a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f2:	2b40      	cmp	r3, #64	; 0x40
 80011f4:	d10e      	bne.n	8001214 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001200:	2b40      	cmp	r3, #64	; 0x40
 8001202:	d107      	bne.n	8001214 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800120c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f8f5 	bl	80013fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	f003 0320 	and.w	r3, r3, #32
 800121e:	2b20      	cmp	r3, #32
 8001220:	d10e      	bne.n	8001240 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	2b20      	cmp	r3, #32
 800122e:	d107      	bne.n	8001240 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f06f 0220 	mvn.w	r2, #32
 8001238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 fa24 	bl	8001688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_TIM_ConfigClockSource+0x18>
 800125c:	2302      	movs	r3, #2
 800125e:	e0a6      	b.n	80013ae <HAL_TIM_ConfigClockSource+0x166>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2202      	movs	r2, #2
 800126c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800127e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001286:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b40      	cmp	r3, #64	; 0x40
 8001296:	d067      	beq.n	8001368 <HAL_TIM_ConfigClockSource+0x120>
 8001298:	2b40      	cmp	r3, #64	; 0x40
 800129a:	d80b      	bhi.n	80012b4 <HAL_TIM_ConfigClockSource+0x6c>
 800129c:	2b10      	cmp	r3, #16
 800129e:	d073      	beq.n	8001388 <HAL_TIM_ConfigClockSource+0x140>
 80012a0:	2b10      	cmp	r3, #16
 80012a2:	d802      	bhi.n	80012aa <HAL_TIM_ConfigClockSource+0x62>
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d06f      	beq.n	8001388 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80012a8:	e078      	b.n	800139c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80012aa:	2b20      	cmp	r3, #32
 80012ac:	d06c      	beq.n	8001388 <HAL_TIM_ConfigClockSource+0x140>
 80012ae:	2b30      	cmp	r3, #48	; 0x30
 80012b0:	d06a      	beq.n	8001388 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80012b2:	e073      	b.n	800139c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80012b4:	2b70      	cmp	r3, #112	; 0x70
 80012b6:	d00d      	beq.n	80012d4 <HAL_TIM_ConfigClockSource+0x8c>
 80012b8:	2b70      	cmp	r3, #112	; 0x70
 80012ba:	d804      	bhi.n	80012c6 <HAL_TIM_ConfigClockSource+0x7e>
 80012bc:	2b50      	cmp	r3, #80	; 0x50
 80012be:	d033      	beq.n	8001328 <HAL_TIM_ConfigClockSource+0xe0>
 80012c0:	2b60      	cmp	r3, #96	; 0x60
 80012c2:	d041      	beq.n	8001348 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80012c4:	e06a      	b.n	800139c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80012c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012ca:	d066      	beq.n	800139a <HAL_TIM_ConfigClockSource+0x152>
 80012cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012d0:	d017      	beq.n	8001302 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80012d2:	e063      	b.n	800139c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	6899      	ldr	r1, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	f000 f96d 	bl	80015c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80012f6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	609a      	str	r2, [r3, #8]
      break;
 8001300:	e04c      	b.n	800139c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6818      	ldr	r0, [r3, #0]
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	6899      	ldr	r1, [r3, #8]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	f000 f956 	bl	80015c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001324:	609a      	str	r2, [r3, #8]
      break;
 8001326:	e039      	b.n	800139c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	6859      	ldr	r1, [r3, #4]
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	461a      	mov	r2, r3
 8001336:	f000 f8cd 	bl	80014d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2150      	movs	r1, #80	; 0x50
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f924 	bl	800158e <TIM_ITRx_SetConfig>
      break;
 8001346:	e029      	b.n	800139c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6818      	ldr	r0, [r3, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	6859      	ldr	r1, [r3, #4]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	461a      	mov	r2, r3
 8001356:	f000 f8eb 	bl	8001530 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2160      	movs	r1, #96	; 0x60
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f914 	bl	800158e <TIM_ITRx_SetConfig>
      break;
 8001366:	e019      	b.n	800139c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6818      	ldr	r0, [r3, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	6859      	ldr	r1, [r3, #4]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	461a      	mov	r2, r3
 8001376:	f000 f8ad 	bl	80014d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2140      	movs	r1, #64	; 0x40
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f904 	bl	800158e <TIM_ITRx_SetConfig>
      break;
 8001386:	e009      	b.n	800139c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	4610      	mov	r0, r2
 8001394:	f000 f8fb 	bl	800158e <TIM_ITRx_SetConfig>
      break;
 8001398:	e000      	b.n	800139c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800139a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2201      	movs	r2, #1
 80013a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr

080013fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a29      	ldr	r2, [pc, #164]	; (80014c8 <TIM_Base_SetConfig+0xb8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d00b      	beq.n	8001440 <TIM_Base_SetConfig+0x30>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800142e:	d007      	beq.n	8001440 <TIM_Base_SetConfig+0x30>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a26      	ldr	r2, [pc, #152]	; (80014cc <TIM_Base_SetConfig+0xbc>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d003      	beq.n	8001440 <TIM_Base_SetConfig+0x30>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a25      	ldr	r2, [pc, #148]	; (80014d0 <TIM_Base_SetConfig+0xc0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d108      	bne.n	8001452 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <TIM_Base_SetConfig+0xb8>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00b      	beq.n	8001472 <TIM_Base_SetConfig+0x62>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001460:	d007      	beq.n	8001472 <TIM_Base_SetConfig+0x62>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a19      	ldr	r2, [pc, #100]	; (80014cc <TIM_Base_SetConfig+0xbc>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d003      	beq.n	8001472 <TIM_Base_SetConfig+0x62>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a18      	ldr	r2, [pc, #96]	; (80014d0 <TIM_Base_SetConfig+0xc0>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d108      	bne.n	8001484 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	4313      	orrs	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4a07      	ldr	r2, [pc, #28]	; (80014c8 <TIM_Base_SetConfig+0xb8>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d103      	bne.n	80014b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	615a      	str	r2, [r3, #20]
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	40012c00 	.word	0x40012c00
 80014cc:	40000400 	.word	0x40000400
 80014d0:	40000800 	.word	0x40000800

080014d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b087      	sub	sp, #28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	f023 0201 	bic.w	r2, r3, #1
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f023 030a 	bic.w	r3, r3, #10
 8001510:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
 8001518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	621a      	str	r2, [r3, #32]
}
 8001526:	bf00      	nop
 8001528:	371c      	adds	r7, #28
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f023 0210 	bic.w	r2, r3, #16
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800155a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	031b      	lsls	r3, r3, #12
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	4313      	orrs	r3, r2
 8001564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800156c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	011b      	lsls	r3, r3, #4
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	621a      	str	r2, [r3, #32]
}
 8001584:	bf00      	nop
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	f043 0307 	orr.w	r3, r3, #7
 80015b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	609a      	str	r2, [r3, #8]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b087      	sub	sp, #28
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	021a      	lsls	r2, r3, #8
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	609a      	str	r2, [r3, #8]
}
 80015f6:	bf00      	nop
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr

08001600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001614:	2302      	movs	r3, #2
 8001616:	e032      	b.n	800167e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2202      	movs	r2, #2
 8001624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800163e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001650:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	4313      	orrs	r3, r2
 800165a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	bc80      	pop	{r7}
 8001698:	4770      	bx	lr

0800169a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80016a2:	bf00      	nop
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bc80      	pop	{r7}
 80016aa:	4770      	bx	lr

080016ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e03f      	b.n	800173e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d106      	bne.n	80016d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 fc6e 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2224      	movs	r2, #36	; 0x24
 80016dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f9b1 	bl	8001a58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	691a      	ldr	r2, [r3, #16]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695a      	ldr	r2, [r3, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2220      	movs	r2, #32
 8001730:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2220      	movs	r2, #32
 8001738:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b088      	sub	sp, #32
 800174a:	af02      	add	r7, sp, #8
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	603b      	str	r3, [r7, #0]
 8001752:	4613      	mov	r3, r2
 8001754:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001760:	b2db      	uxtb	r3, r3
 8001762:	2b20      	cmp	r3, #32
 8001764:	f040 8083 	bne.w	800186e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <HAL_UART_Transmit+0x2e>
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e07b      	b.n	8001870 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800177e:	2b01      	cmp	r3, #1
 8001780:	d101      	bne.n	8001786 <HAL_UART_Transmit+0x40>
 8001782:	2302      	movs	r3, #2
 8001784:	e074      	b.n	8001870 <HAL_UART_Transmit+0x12a>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2200      	movs	r2, #0
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2221      	movs	r2, #33	; 0x21
 8001798:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800179c:	f7fe fd40 	bl	8000220 <HAL_GetTick>
 80017a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	88fa      	ldrh	r2, [r7, #6]
 80017a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	88fa      	ldrh	r2, [r7, #6]
 80017ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80017ae:	e042      	b.n	8001836 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c6:	d122      	bne.n	800180e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2200      	movs	r2, #0
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f000 f8f6 	bl	80019c4 <UART_WaitOnFlagUntilTimeout>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e046      	b.n	8001870 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d103      	bne.n	8001806 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3302      	adds	r3, #2
 8001802:	60bb      	str	r3, [r7, #8]
 8001804:	e017      	b.n	8001836 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	3301      	adds	r3, #1
 800180a:	60bb      	str	r3, [r7, #8]
 800180c:	e013      	b.n	8001836 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	2200      	movs	r2, #0
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f000 f8d3 	bl	80019c4 <UART_WaitOnFlagUntilTimeout>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e023      	b.n	8001870 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800183a:	b29b      	uxth	r3, r3
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1b7      	bne.n	80017b0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2200      	movs	r2, #0
 8001848:	2140      	movs	r1, #64	; 0x40
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 f8ba 	bl	80019c4 <UART_WaitOnFlagUntilTimeout>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e00a      	b.n	8001870 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2220      	movs	r2, #32
 800185e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800186e:	2302      	movs	r3, #2
  }
}
 8001870:	4618      	mov	r0, r3
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af02      	add	r7, sp, #8
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	4613      	mov	r3, r2
 8001886:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b20      	cmp	r3, #32
 8001896:	f040 8090 	bne.w	80019ba <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <HAL_UART_Receive+0x2e>
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e088      	b.n	80019bc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d101      	bne.n	80018b8 <HAL_UART_Receive+0x40>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e081      	b.n	80019bc <HAL_UART_Receive+0x144>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2222      	movs	r2, #34	; 0x22
 80018ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80018ce:	f7fe fca7 	bl	8000220 <HAL_GetTick>
 80018d2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	88fa      	ldrh	r2, [r7, #6]
 80018d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	88fa      	ldrh	r2, [r7, #6]
 80018de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80018e0:	e05c      	b.n	800199c <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3b01      	subs	r3, #1
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018f8:	d12b      	bne.n	8001952 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2200      	movs	r2, #0
 8001902:	2120      	movs	r1, #32
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f85d 	bl	80019c4 <UART_WaitOnFlagUntilTimeout>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e053      	b.n	80019bc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10c      	bne.n	800193a <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	b29b      	uxth	r3, r3
 8001928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800192c:	b29a      	uxth	r2, r3
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	3302      	adds	r3, #2
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	e030      	b.n	800199c <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	b29b      	uxth	r3, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	b29a      	uxth	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3301      	adds	r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	e024      	b.n	800199c <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	2200      	movs	r2, #0
 800195a:	2120      	movs	r1, #32
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f831 	bl	80019c4 <UART_WaitOnFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e027      	b.n	80019bc <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d108      	bne.n	8001986 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6859      	ldr	r1, [r3, #4]
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	60ba      	str	r2, [r7, #8]
 8001980:	b2ca      	uxtb	r2, r1
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	e00a      	b.n	800199c <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	1c59      	adds	r1, r3, #1
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d19d      	bne.n	80018e2 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2220      	movs	r2, #32
 80019aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	e000      	b.n	80019bc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80019ba:	2302      	movs	r3, #2
  }
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	4613      	mov	r3, r2
 80019d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019d4:	e02c      	b.n	8001a30 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d028      	beq.n	8001a30 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80019e4:	f7fe fc1c 	bl	8000220 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d21d      	bcs.n	8001a30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a02:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2220      	movs	r2, #32
 8001a20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e00f      	b.n	8001a50 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d0c3      	beq.n	80019d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	430a      	orrs	r2, r1
 8001a74:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689a      	ldr	r2, [r3, #8]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001a92:	f023 030c 	bic.w	r3, r3, #12
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699a      	ldr	r2, [r3, #24]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a52      	ldr	r2, [pc, #328]	; (8001c04 <UART_SetConfig+0x1ac>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d14e      	bne.n	8001b5e <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001ac0:	f7ff fa3a 	bl	8000f38 <HAL_RCC_GetPCLK2Freq>
 8001ac4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	009a      	lsls	r2, r3, #2
 8001ad0:	441a      	add	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001adc:	4a4a      	ldr	r2, [pc, #296]	; (8001c08 <UART_SetConfig+0x1b0>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	0119      	lsls	r1, r3, #4
 8001ae6:	68ba      	ldr	r2, [r7, #8]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	009a      	lsls	r2, r3, #2
 8001af0:	441a      	add	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001afc:	4b42      	ldr	r3, [pc, #264]	; (8001c08 <UART_SetConfig+0x1b0>)
 8001afe:	fba3 0302 	umull	r0, r3, r3, r2
 8001b02:	095b      	lsrs	r3, r3, #5
 8001b04:	2064      	movs	r0, #100	; 0x64
 8001b06:	fb00 f303 	mul.w	r3, r0, r3
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	011b      	lsls	r3, r3, #4
 8001b0e:	3332      	adds	r3, #50	; 0x32
 8001b10:	4a3d      	ldr	r2, [pc, #244]	; (8001c08 <UART_SetConfig+0x1b0>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b1c:	4419      	add	r1, r3
 8001b1e:	68ba      	ldr	r2, [r7, #8]
 8001b20:	4613      	mov	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	4413      	add	r3, r2
 8001b26:	009a      	lsls	r2, r3, #2
 8001b28:	441a      	add	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b34:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <UART_SetConfig+0x1b0>)
 8001b36:	fba3 0302 	umull	r0, r3, r3, r2
 8001b3a:	095b      	lsrs	r3, r3, #5
 8001b3c:	2064      	movs	r0, #100	; 0x64
 8001b3e:	fb00 f303 	mul.w	r3, r0, r3
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	011b      	lsls	r3, r3, #4
 8001b46:	3332      	adds	r3, #50	; 0x32
 8001b48:	4a2f      	ldr	r2, [pc, #188]	; (8001c08 <UART_SetConfig+0x1b0>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	f003 020f 	and.w	r2, r3, #15
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	440a      	add	r2, r1
 8001b5a:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8001b5c:	e04d      	b.n	8001bfa <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b5e:	f7ff f9d7 	bl	8000f10 <HAL_RCC_GetPCLK1Freq>
 8001b62:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009a      	lsls	r2, r3, #2
 8001b6e:	441a      	add	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <UART_SetConfig+0x1b0>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	095b      	lsrs	r3, r3, #5
 8001b82:	0119      	lsls	r1, r3, #4
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009a      	lsls	r2, r3, #2
 8001b8e:	441a      	add	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <UART_SetConfig+0x1b0>)
 8001b9c:	fba3 0302 	umull	r0, r3, r3, r2
 8001ba0:	095b      	lsrs	r3, r3, #5
 8001ba2:	2064      	movs	r0, #100	; 0x64
 8001ba4:	fb00 f303 	mul.w	r3, r0, r3
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	011b      	lsls	r3, r3, #4
 8001bac:	3332      	adds	r3, #50	; 0x32
 8001bae:	4a16      	ldr	r2, [pc, #88]	; (8001c08 <UART_SetConfig+0x1b0>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	095b      	lsrs	r3, r3, #5
 8001bb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bba:	4419      	add	r1, r3
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	009a      	lsls	r2, r3, #2
 8001bc6:	441a      	add	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <UART_SetConfig+0x1b0>)
 8001bd4:	fba3 0302 	umull	r0, r3, r3, r2
 8001bd8:	095b      	lsrs	r3, r3, #5
 8001bda:	2064      	movs	r0, #100	; 0x64
 8001bdc:	fb00 f303 	mul.w	r3, r0, r3
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	3332      	adds	r3, #50	; 0x32
 8001be6:	4a08      	ldr	r2, [pc, #32]	; (8001c08 <UART_SetConfig+0x1b0>)
 8001be8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	f003 020f 	and.w	r2, r3, #15
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	440a      	add	r2, r1
 8001bf8:	609a      	str	r2, [r3, #8]
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40013800 	.word	0x40013800
 8001c08:	51eb851f 	.word	0x51eb851f

08001c0c <UART_Print>:
 *      Author: Piko Prasetyo
 */
#include "UART.h"


void UART_Print (char *pData){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)pData, strlen(pData), 10);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7fe faa3 	bl	8000160 <strlen>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	230a      	movs	r3, #10
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4803      	ldr	r0, [pc, #12]	; (8001c30 <UART_Print+0x24>)
 8001c24:	f7ff fd8f 	bl	8001746 <HAL_UART_Transmit>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000034 	.word	0x20000034

08001c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c38:	f7fe fa9a 	bl	8000170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c3c:	f000 f80e 	bl	8001c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c40:	f000 f8ca 	bl	8001dd8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001c44:	f000 f850 	bl	8001ce8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001c48:	f000 f89c 	bl	8001d84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Task_Inisialisasi();
 8001c4c:	f000 fa68 	bl	8002120 <Task_Inisialisasi>
  HAL_TIM_Base_Start_IT(&htim3);
 8001c50:	4801      	ldr	r0, [pc, #4]	; (8001c58 <main+0x24>)
 8001c52:	f7ff f9ce 	bl	8000ff2 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <main+0x22>
 8001c58:	20000074 	.word	0x20000074

08001c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b090      	sub	sp, #64	; 0x40
 8001c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	2228      	movs	r2, #40	; 0x28
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f001 f814 	bl	8002c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c90:	2302      	movs	r3, #2
 8001c92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe fd5d 	bl	8000764 <HAL_RCC_OscConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001cb0:	f000 f922 	bl	8001ef8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2102      	movs	r1, #2
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe ffc8 	bl	8000c64 <HAL_RCC_ClockConfig>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001cda:	f000 f90d 	bl	8001ef8 <Error_Handler>
  }
}
 8001cde:	bf00      	nop
 8001ce0:	3740      	adds	r7, #64	; 0x40
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d04:	4b1d      	ldr	r3, [pc, #116]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d06:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <MX_TIM3_Init+0x98>)
 8001d08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d0c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8001d10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d24:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d2a:	4814      	ldr	r0, [pc, #80]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d2c:	f7ff f936 	bl	8000f9c <HAL_TIM_Base_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d36:	f000 f8df 	bl	8001ef8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d40:	f107 0308 	add.w	r3, r7, #8
 8001d44:	4619      	mov	r1, r3
 8001d46:	480d      	ldr	r0, [pc, #52]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d48:	f7ff fa7e 	bl	8001248 <HAL_TIM_ConfigClockSource>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d52:	f000 f8d1 	bl	8001ef8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	4619      	mov	r1, r3
 8001d62:	4806      	ldr	r0, [pc, #24]	; (8001d7c <MX_TIM3_Init+0x94>)
 8001d64:	f7ff fc4c 	bl	8001600 <HAL_TIMEx_MasterConfigSynchronization>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d6e:	f000 f8c3 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d72:	bf00      	nop
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000074 	.word	0x20000074
 8001d80:	40000400 	.word	0x40000400

08001d84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <MX_USART1_UART_Init+0x4c>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <MX_USART1_UART_Init+0x50>)
 8001d8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <MX_USART1_UART_Init+0x4c>)
 8001d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <MX_USART1_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <MX_USART1_UART_Init+0x4c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <MX_USART1_UART_Init+0x4c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <MX_USART1_UART_Init+0x4c>)
 8001daa:	220c      	movs	r2, #12
 8001dac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <MX_USART1_UART_Init+0x4c>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <MX_USART1_UART_Init+0x4c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dba:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_USART1_UART_Init+0x4c>)
 8001dbc:	f7ff fc76 	bl	80016ac <HAL_UART_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dc6:	f000 f897 	bl	8001ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000034 	.word	0x20000034
 8001dd4:	40013800 	.word	0x40013800

08001dd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
 8001dea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dec:	4b3e      	ldr	r3, [pc, #248]	; (8001ee8 <MX_GPIO_Init+0x110>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	4a3d      	ldr	r2, [pc, #244]	; (8001ee8 <MX_GPIO_Init+0x110>)
 8001df2:	f043 0310 	orr.w	r3, r3, #16
 8001df6:	6193      	str	r3, [r2, #24]
 8001df8:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <MX_GPIO_Init+0x110>)
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e04:	4b38      	ldr	r3, [pc, #224]	; (8001ee8 <MX_GPIO_Init+0x110>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a37      	ldr	r2, [pc, #220]	; (8001ee8 <MX_GPIO_Init+0x110>)
 8001e0a:	f043 0320 	orr.w	r3, r3, #32
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b35      	ldr	r3, [pc, #212]	; (8001ee8 <MX_GPIO_Init+0x110>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0320 	and.w	r3, r3, #32
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	4b32      	ldr	r3, [pc, #200]	; (8001ee8 <MX_GPIO_Init+0x110>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a31      	ldr	r2, [pc, #196]	; (8001ee8 <MX_GPIO_Init+0x110>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <MX_GPIO_Init+0x110>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e34:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <MX_GPIO_Init+0x110>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a2b      	ldr	r2, [pc, #172]	; (8001ee8 <MX_GPIO_Init+0x110>)
 8001e3a:	f043 0308 	orr.w	r3, r3, #8
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <MX_GPIO_Init+0x110>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e52:	4826      	ldr	r0, [pc, #152]	; (8001eec <MX_GPIO_Init+0x114>)
 8001e54:	f7fe fc6d 	bl	8000732 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S500_Pin|S1000_Pin|KeluarKaleng_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8001e5e:	4824      	ldr	r0, [pc, #144]	; (8001ef0 <MX_GPIO_Init+0x118>)
 8001e60:	f7fe fc67 	bl	8000732 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KeluarKoin_GPIO_Port, KeluarKoin_Pin, GPIO_PIN_RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2108      	movs	r1, #8
 8001e68:	4822      	ldr	r0, [pc, #136]	; (8001ef4 <MX_GPIO_Init+0x11c>)
 8001e6a:	f7fe fc62 	bl	8000732 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	4619      	mov	r1, r3
 8001e86:	4819      	ldr	r0, [pc, #100]	; (8001eec <MX_GPIO_Init+0x114>)
 8001e88:	f7fe fae2 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pins : a500_Pin a1000_Pin PROSES_Pin BATAL_Pin */
  GPIO_InitStruct.Pin = a500_Pin|a1000_Pin|PROSES_Pin|BATAL_Pin;
 8001e8c:	2378      	movs	r3, #120	; 0x78
 8001e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e94:	2301      	movs	r3, #1
 8001e96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 0310 	add.w	r3, r7, #16
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4814      	ldr	r0, [pc, #80]	; (8001ef0 <MX_GPIO_Init+0x118>)
 8001ea0:	f7fe fad6 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pins : S500_Pin S1000_Pin KeluarKaleng_Pin */
  GPIO_InitStruct.Pin = S500_Pin|S1000_Pin|KeluarKaleng_Pin;
 8001ea4:	f44f 4318 	mov.w	r3, #38912	; 0x9800
 8001ea8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4619      	mov	r1, r3
 8001ebc:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <MX_GPIO_Init+0x118>)
 8001ebe:	f7fe fac7 	bl	8000450 <HAL_GPIO_Init>

  /*Configure GPIO pin : KeluarKoin_Pin */
  GPIO_InitStruct.Pin = KeluarKoin_Pin;
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KeluarKoin_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 0310 	add.w	r3, r7, #16
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <MX_GPIO_Init+0x11c>)
 8001eda:	f7fe fab9 	bl	8000450 <HAL_GPIO_Init>

}
 8001ede:	bf00      	nop
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40011000 	.word	0x40011000
 8001ef0:	40010800 	.word	0x40010800
 8001ef4:	40010c00 	.word	0x40010c00

08001ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	4a14      	ldr	r2, [pc, #80]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6193      	str	r3, [r2, #24]
 8001f16:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	61d3      	str	r3, [r2, #28]
 8001f2e:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <HAL_MspInit+0x5c>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_MspInit+0x60>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <HAL_MspInit+0x60>)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40010000 	.word	0x40010000

08001f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <HAL_TIM_Base_MspInit+0x44>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d113      	bne.n	8001fa2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_TIM_Base_MspInit+0x48>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <HAL_TIM_Base_MspInit+0x48>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	61d3      	str	r3, [r2, #28]
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_TIM_Base_MspInit+0x48>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f92:	2200      	movs	r2, #0
 8001f94:	2100      	movs	r1, #0
 8001f96:	201d      	movs	r0, #29
 8001f98:	f7fe fa23 	bl	80003e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f9c:	201d      	movs	r0, #29
 8001f9e:	f7fe fa3c 	bl	800041a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fa2:	bf00      	nop
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40000400 	.word	0x40000400
 8001fb0:	40021000 	.word	0x40021000

08001fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0310 	add.w	r3, r7, #16
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a1c      	ldr	r2, [pc, #112]	; (8002040 <HAL_UART_MspInit+0x8c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d131      	bne.n	8002038 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	; (8002044 <HAL_UART_MspInit+0x90>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <HAL_UART_MspInit+0x90>)
 8001fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_UART_MspInit+0x90>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_UART_MspInit+0x90>)
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4a14      	ldr	r2, [pc, #80]	; (8002044 <HAL_UART_MspInit+0x90>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	6193      	str	r3, [r2, #24]
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_UART_MspInit+0x90>)
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 0310 	add.w	r3, r7, #16
 8002016:	4619      	mov	r1, r3
 8002018:	480b      	ldr	r0, [pc, #44]	; (8002048 <HAL_UART_MspInit+0x94>)
 800201a:	f7fe fa19 	bl	8000450 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800201e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	4619      	mov	r1, r3
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <HAL_UART_MspInit+0x94>)
 8002034:	f7fe fa0c 	bl	8000450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002038:	bf00      	nop
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40013800 	.word	0x40013800
 8002044:	40021000 	.word	0x40021000
 8002048:	40010800 	.word	0x40010800

0800204c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205c:	e7fe      	b.n	800205c <HardFault_Handler+0x4>

0800205e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002062:	e7fe      	b.n	8002062 <MemManage_Handler+0x4>

08002064 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002068:	e7fe      	b.n	8002068 <BusFault_Handler+0x4>

0800206a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800206e:	e7fe      	b.n	800206e <UsageFault_Handler+0x4>

08002070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002098:	f7fe f8b0 	bl	80001fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}

080020a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020a4:	4803      	ldr	r0, [pc, #12]	; (80020b4 <TIM3_IRQHandler+0x14>)
 80020a6:	f7fe ffc7 	bl	8001038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  Task_Run();
 80020aa:	f000 f849 	bl	8002140 <Task_Run>
  /* USER CODE END TIM3_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000074 	.word	0x20000074

080020b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <SystemInit+0x5c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <SystemInit+0x5c>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <SystemInit+0x5c>)
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4911      	ldr	r1, [pc, #68]	; (8002114 <SystemInit+0x5c>)
 80020ce:	4b12      	ldr	r3, [pc, #72]	; (8002118 <SystemInit+0x60>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <SystemInit+0x5c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <SystemInit+0x5c>)
 80020da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80020de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <SystemInit+0x5c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <SystemInit+0x5c>)
 80020ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <SystemInit+0x5c>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <SystemInit+0x5c>)
 80020f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80020fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SystemInit+0x5c>)
 80020fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002102:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <SystemInit+0x64>)
 8002106:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800210a:	609a      	str	r2, [r3, #8]
#endif 
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	bc80      	pop	{r7}
 8002112:	4770      	bx	lr
 8002114:	40021000 	.word	0x40021000
 8002118:	f8ff0000 	.word	0xf8ff0000
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <Task_Inisialisasi>:
volatile uint16_t jeda03;
volatile uint16_t jeda04;
char terpilih[10];
int menu;

void Task_Inisialisasi(void){
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
	timeout=0;
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <Task_Inisialisasi+0x18>)
 8002126:	2200      	movs	r2, #0
 8002128:	801a      	strh	r2, [r3, #0]
	keadaan=start;
 800212a:	4b04      	ldr	r3, [pc, #16]	; (800213c <Task_Inisialisasi+0x1c>)
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	200000ca 	.word	0x200000ca
 800213c:	200000cc 	.word	0x200000cc

08002140 <Task_Run>:

void Task_Run(void){
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	switch(keadaan){
 8002144:	4bb9      	ldr	r3, [pc, #740]	; (800242c <Task_Run+0x2ec>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b0e      	cmp	r3, #14
 800214a:	f200 84a8 	bhi.w	8002a9e <Task_Run+0x95e>
 800214e:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <Task_Run+0x14>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002191 	.word	0x08002191
 8002158:	080021b7 	.word	0x080021b7
 800215c:	080021e5 	.word	0x080021e5
 8002160:	08002241 	.word	0x08002241
 8002164:	080022a9 	.word	0x080022a9
 8002168:	08002311 	.word	0x08002311
 800216c:	08002385 	.word	0x08002385
 8002170:	08002405 	.word	0x08002405
 8002174:	08002419 	.word	0x08002419
 8002178:	08002475 	.word	0x08002475
 800217c:	080028eb 	.word	0x080028eb
 8002180:	08002903 	.word	0x08002903
 8002184:	08002945 	.word	0x08002945
 8002188:	08002985 	.word	0x08002985
 800218c:	080029db 	.word	0x080029db
	case start:
	{
		offKeluarKembalian;
 8002190:	2200      	movs	r2, #0
 8002192:	2108      	movs	r1, #8
 8002194:	48a6      	ldr	r0, [pc, #664]	; (8002430 <Task_Run+0x2f0>)
 8002196:	f7fe facc 	bl	8000732 <HAL_GPIO_WritePin>
		offKeluarKaleng;
 800219a:	2200      	movs	r2, #0
 800219c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021a0:	48a4      	ldr	r0, [pc, #656]	; (8002434 <Task_Run+0x2f4>)
 80021a2:	f7fe fac6 	bl	8000732 <HAL_GPIO_WritePin>
		UART_Print("**** VENDING MACHINE 2019 copyright PIKO ***** \n");
 80021a6:	48a4      	ldr	r0, [pc, #656]	; (8002438 <Task_Run+0x2f8>)
 80021a8:	f7ff fd30 	bl	8001c0c <UART_Print>
		keadaan=startDelay;
 80021ac:	4b9f      	ldr	r3, [pc, #636]	; (800242c <Task_Run+0x2ec>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
		break;
 80021b2:	f000 bc74 	b.w	8002a9e <Task_Run+0x95e>
	}
	case startDelay:
	{
		//HAL_GPIO_WritePin(led1_GPIO_Port,led1_Pin,GPIO_PIN_SET);
		if (++timeout > 1000) // dari scheduler sebesar 2ms*1000= 2 detik
 80021b6:	4ba1      	ldr	r3, [pc, #644]	; (800243c <Task_Run+0x2fc>)
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	b29b      	uxth	r3, r3
 80021c0:	4a9e      	ldr	r2, [pc, #632]	; (800243c <Task_Run+0x2fc>)
 80021c2:	4619      	mov	r1, r3
 80021c4:	8011      	strh	r1, [r2, #0]
 80021c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ca:	f240 8431 	bls.w	8002a30 <Task_Run+0x8f0>
		{
			UART_Print("Enter Coin \n"); //current state
 80021ce:	489c      	ldr	r0, [pc, #624]	; (8002440 <Task_Run+0x300>)
 80021d0:	f7ff fd1c 	bl	8001c0c <UART_Print>
			timeout=0;
 80021d4:	4b99      	ldr	r3, [pc, #612]	; (800243c <Task_Run+0x2fc>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	801a      	strh	r2, [r3, #0]
			keadaan=enterCoin;
 80021da:	4b94      	ldr	r3, [pc, #592]	; (800242c <Task_Run+0x2ec>)
 80021dc:	2202      	movs	r2, #2
 80021de:	701a      	strb	r2, [r3, #0]
		}
		break;
 80021e0:	f000 bc26 	b.w	8002a30 <Task_Run+0x8f0>
	}
	case enterCoin:
	{
		if(Button500_ok()){
 80021e4:	f000 fc5e 	bl	8002aa4 <Button500_ok>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <Task_Run+0xc0>
			keadaan=s500;
 80021ee:	4b8f      	ldr	r3, [pc, #572]	; (800242c <Task_Run+0x2ec>)
 80021f0:	2203      	movs	r2, #3
 80021f2:	701a      	strb	r2, [r3, #0]
			UART_Print("koin 500 telah masuk \n");
 80021f4:	4893      	ldr	r0, [pc, #588]	; (8002444 <Task_Run+0x304>)
 80021f6:	f7ff fd09 	bl	8001c0c <UART_Print>
			UART_Print("saldo: Rp500,- \n");
 80021fa:	4893      	ldr	r0, [pc, #588]	; (8002448 <Task_Run+0x308>)
 80021fc:	f7ff fd06 	bl	8001c0c <UART_Print>
		}
		if(Button1000_ok()){
 8002200:	f000 fc7c 	bl	8002afc <Button1000_ok>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <Task_Run+0xdc>
			keadaan=s1000;
 800220a:	4b88      	ldr	r3, [pc, #544]	; (800242c <Task_Run+0x2ec>)
 800220c:	2204      	movs	r2, #4
 800220e:	701a      	strb	r2, [r3, #0]
			UART_Print("koin 1000 telah masuk \n");
 8002210:	488e      	ldr	r0, [pc, #568]	; (800244c <Task_Run+0x30c>)
 8002212:	f7ff fcfb 	bl	8001c0c <UART_Print>
			UART_Print("saldo: Rp1000,- \n");
 8002216:	488e      	ldr	r0, [pc, #568]	; (8002450 <Task_Run+0x310>)
 8002218:	f7ff fcf8 	bl	8001c0c <UART_Print>
		}
		if(ButtonProses_ok()||ButtonBatal_ok()){
 800221c:	f000 fc9a 	bl	8002b54 <ButtonProses_ok>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <Task_Run+0xf2>
 8002226:	f000 fcc1 	bl	8002bac <ButtonBatal_ok>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 8401 	beq.w	8002a34 <Task_Run+0x8f4>
			UART_Print("Coin belum cukup \n");
 8002232:	4888      	ldr	r0, [pc, #544]	; (8002454 <Task_Run+0x314>)
 8002234:	f7ff fcea 	bl	8001c0c <UART_Print>
			keadaan=startDelay;
 8002238:	4b7c      	ldr	r3, [pc, #496]	; (800242c <Task_Run+0x2ec>)
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
		}
		break;
 800223e:	e3f9      	b.n	8002a34 <Task_Run+0x8f4>
	}
	case s500:
	{
		if(Button500_ok()){
 8002240:	f000 fc30 	bl	8002aa4 <Button500_ok>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <Task_Run+0x11c>
			keadaan=s1000;
 800224a:	4b78      	ldr	r3, [pc, #480]	; (800242c <Task_Run+0x2ec>)
 800224c:	2204      	movs	r2, #4
 800224e:	701a      	strb	r2, [r3, #0]
			UART_Print("koin 500 telah masuk \n");
 8002250:	487c      	ldr	r0, [pc, #496]	; (8002444 <Task_Run+0x304>)
 8002252:	f7ff fcdb 	bl	8001c0c <UART_Print>
			UART_Print("saldo: Rp1000,- \n");
 8002256:	487e      	ldr	r0, [pc, #504]	; (8002450 <Task_Run+0x310>)
 8002258:	f7ff fcd8 	bl	8001c0c <UART_Print>
		}
		if(Button1000_ok()){
 800225c:	f000 fc4e 	bl	8002afc <Button1000_ok>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d008      	beq.n	8002278 <Task_Run+0x138>
			keadaan=s1500;
 8002266:	4b71      	ldr	r3, [pc, #452]	; (800242c <Task_Run+0x2ec>)
 8002268:	2205      	movs	r2, #5
 800226a:	701a      	strb	r2, [r3, #0]
			UART_Print("koin 1000 telah masuk \n");
 800226c:	4877      	ldr	r0, [pc, #476]	; (800244c <Task_Run+0x30c>)
 800226e:	f7ff fccd 	bl	8001c0c <UART_Print>
			UART_Print("saldo: Rp1500,- \n");
 8002272:	4879      	ldr	r0, [pc, #484]	; (8002458 <Task_Run+0x318>)
 8002274:	f7ff fcca 	bl	8001c0c <UART_Print>
		}
		if(ButtonProses_ok()){
 8002278:	f000 fc6c 	bl	8002b54 <ButtonProses_ok>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <Task_Run+0x14e>
			UART_Print("Coin belum cukup \n");
 8002282:	4874      	ldr	r0, [pc, #464]	; (8002454 <Task_Run+0x314>)
 8002284:	f7ff fcc2 	bl	8001c0c <UART_Print>
			keadaan=s500;
 8002288:	4b68      	ldr	r3, [pc, #416]	; (800242c <Task_Run+0x2ec>)
 800228a:	2203      	movs	r2, #3
 800228c:	701a      	strb	r2, [r3, #0]
		}
		if(ButtonBatal_ok()){
 800228e:	f000 fc8d 	bl	8002bac <ButtonBatal_ok>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 83cf 	beq.w	8002a38 <Task_Run+0x8f8>
			keadaan=Batal;
 800229a:	4b64      	ldr	r3, [pc, #400]	; (800242c <Task_Run+0x2ec>)
 800229c:	220a      	movs	r2, #10
 800229e:	701a      	strb	r2, [r3, #0]
			UART_Print("500 KELUAR \n");
 80022a0:	486e      	ldr	r0, [pc, #440]	; (800245c <Task_Run+0x31c>)
 80022a2:	f7ff fcb3 	bl	8001c0c <UART_Print>
		}
		break;
 80022a6:	e3c7      	b.n	8002a38 <Task_Run+0x8f8>
	}
	case s1000:
	{
		//UART_Receive(terpilih);
		if(Button500_ok()){
 80022a8:	f000 fbfc 	bl	8002aa4 <Button500_ok>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <Task_Run+0x184>
			keadaan=s1500;
 80022b2:	4b5e      	ldr	r3, [pc, #376]	; (800242c <Task_Run+0x2ec>)
 80022b4:	2205      	movs	r2, #5
 80022b6:	701a      	strb	r2, [r3, #0]
			UART_Print("koin 500 telah masuk \n");
 80022b8:	4862      	ldr	r0, [pc, #392]	; (8002444 <Task_Run+0x304>)
 80022ba:	f7ff fca7 	bl	8001c0c <UART_Print>
			UART_Print("saldo: Rp1500,- \n");
 80022be:	4866      	ldr	r0, [pc, #408]	; (8002458 <Task_Run+0x318>)
 80022c0:	f7ff fca4 	bl	8001c0c <UART_Print>
		}
		if(Button1000_ok()){
 80022c4:	f000 fc1a 	bl	8002afc <Button1000_ok>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <Task_Run+0x1a0>
			keadaan=s2000;
 80022ce:	4b57      	ldr	r3, [pc, #348]	; (800242c <Task_Run+0x2ec>)
 80022d0:	2206      	movs	r2, #6
 80022d2:	701a      	strb	r2, [r3, #0]
			UART_Print("koin 1000 telah masuk \n");
 80022d4:	485d      	ldr	r0, [pc, #372]	; (800244c <Task_Run+0x30c>)
 80022d6:	f7ff fc99 	bl	8001c0c <UART_Print>
			UART_Print("saldo: Rp2000,- \n");
 80022da:	4861      	ldr	r0, [pc, #388]	; (8002460 <Task_Run+0x320>)
 80022dc:	f7ff fc96 	bl	8001c0c <UART_Print>
		}
		if(ButtonProses_ok()){
 80022e0:	f000 fc38 	bl	8002b54 <ButtonProses_ok>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <Task_Run+0x1b6>
			keadaan=Proses;
 80022ea:	4b50      	ldr	r3, [pc, #320]	; (800242c <Task_Run+0x2ec>)
 80022ec:	2209      	movs	r2, #9
 80022ee:	701a      	strb	r2, [r3, #0]
			menu=1;
 80022f0:	4b5c      	ldr	r3, [pc, #368]	; (8002464 <Task_Run+0x324>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
		}
		if(ButtonBatal_ok()){
 80022f6:	f000 fc59 	bl	8002bac <ButtonBatal_ok>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 839d 	beq.w	8002a3c <Task_Run+0x8fc>
			keadaan=Batal;
 8002302:	4b4a      	ldr	r3, [pc, #296]	; (800242c <Task_Run+0x2ec>)
 8002304:	220a      	movs	r2, #10
 8002306:	701a      	strb	r2, [r3, #0]
			UART_Print("1000 KELUAR \n");
 8002308:	4857      	ldr	r0, [pc, #348]	; (8002468 <Task_Run+0x328>)
 800230a:	f7ff fc7f 	bl	8001c0c <UART_Print>
		}
		break;
 800230e:	e395      	b.n	8002a3c <Task_Run+0x8fc>
	}
	case s1500:
	{
		//terpilih=UART_Receive(*pData);
		if(Button500_ok()){
 8002310:	f000 fbc8 	bl	8002aa4 <Button500_ok>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <Task_Run+0x1ec>
			keadaan=s2000;
 800231a:	4b44      	ldr	r3, [pc, #272]	; (800242c <Task_Run+0x2ec>)
 800231c:	2206      	movs	r2, #6
 800231e:	701a      	strb	r2, [r3, #0]
			UART_Print("koin 500 telah masuk \n");
 8002320:	4848      	ldr	r0, [pc, #288]	; (8002444 <Task_Run+0x304>)
 8002322:	f7ff fc73 	bl	8001c0c <UART_Print>
			UART_Print("saldo: Rp2000,- \n");
 8002326:	484e      	ldr	r0, [pc, #312]	; (8002460 <Task_Run+0x320>)
 8002328:	f7ff fc70 	bl	8001c0c <UART_Print>
		}
		if(Button1000_ok()){
 800232c:	f000 fbe6 	bl	8002afc <Button1000_ok>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00e      	beq.n	8002354 <Task_Run+0x214>
			keadaan=kembali500;
 8002336:	4b3d      	ldr	r3, [pc, #244]	; (800242c <Task_Run+0x2ec>)
 8002338:	2207      	movs	r2, #7
 800233a:	701a      	strb	r2, [r3, #0]
			UART_Print("500 KELUAR \n");
 800233c:	4847      	ldr	r0, [pc, #284]	; (800245c <Task_Run+0x31c>)
 800233e:	f7ff fc65 	bl	8001c0c <UART_Print>
			UART_Print("saldo: Rp2000,- \n");
 8002342:	4847      	ldr	r0, [pc, #284]	; (8002460 <Task_Run+0x320>)
 8002344:	f7ff fc62 	bl	8001c0c <UART_Print>
			Plus500;
 8002348:	2201      	movs	r2, #1
 800234a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800234e:	4839      	ldr	r0, [pc, #228]	; (8002434 <Task_Run+0x2f4>)
 8002350:	f7fe f9ef 	bl	8000732 <HAL_GPIO_WritePin>
		}
		if(ButtonProses_ok()){
 8002354:	f000 fbfe 	bl	8002b54 <ButtonProses_ok>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <Task_Run+0x22a>
			keadaan=Proses;
 800235e:	4b33      	ldr	r3, [pc, #204]	; (800242c <Task_Run+0x2ec>)
 8002360:	2209      	movs	r2, #9
 8002362:	701a      	strb	r2, [r3, #0]
			menu=2;
 8002364:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <Task_Run+0x324>)
 8002366:	2202      	movs	r2, #2
 8002368:	601a      	str	r2, [r3, #0]
		}
		if(ButtonBatal_ok()){
 800236a:	f000 fc1f 	bl	8002bac <ButtonBatal_ok>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 8365 	beq.w	8002a40 <Task_Run+0x900>
			keadaan=Batal;
 8002376:	4b2d      	ldr	r3, [pc, #180]	; (800242c <Task_Run+0x2ec>)
 8002378:	220a      	movs	r2, #10
 800237a:	701a      	strb	r2, [r3, #0]
			UART_Print("1500 KELUAR \n");
 800237c:	483b      	ldr	r0, [pc, #236]	; (800246c <Task_Run+0x32c>)
 800237e:	f7ff fc45 	bl	8001c0c <UART_Print>
		}
		break;
 8002382:	e35d      	b.n	8002a40 <Task_Run+0x900>
	}
	case s2000:
	{
		if(Button500_ok()){
 8002384:	f000 fb8e 	bl	8002aa4 <Button500_ok>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00e      	beq.n	80023ac <Task_Run+0x26c>
			keadaan=kembali500;
 800238e:	4b27      	ldr	r3, [pc, #156]	; (800242c <Task_Run+0x2ec>)
 8002390:	2207      	movs	r2, #7
 8002392:	701a      	strb	r2, [r3, #0]
			UART_Print("500 KELUAR \n");
 8002394:	4831      	ldr	r0, [pc, #196]	; (800245c <Task_Run+0x31c>)
 8002396:	f7ff fc39 	bl	8001c0c <UART_Print>
			UART_Print("saldo: Rp2000,- \n");
 800239a:	4831      	ldr	r0, [pc, #196]	; (8002460 <Task_Run+0x320>)
 800239c:	f7ff fc36 	bl	8001c0c <UART_Print>
			Plus500;
 80023a0:	2201      	movs	r2, #1
 80023a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023a6:	4823      	ldr	r0, [pc, #140]	; (8002434 <Task_Run+0x2f4>)
 80023a8:	f7fe f9c3 	bl	8000732 <HAL_GPIO_WritePin>
		}
		if(Button1000_ok()){
 80023ac:	f000 fba6 	bl	8002afc <Button1000_ok>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00e      	beq.n	80023d4 <Task_Run+0x294>
			keadaan=kembali1000;
 80023b6:	4b1d      	ldr	r3, [pc, #116]	; (800242c <Task_Run+0x2ec>)
 80023b8:	2208      	movs	r2, #8
 80023ba:	701a      	strb	r2, [r3, #0]
			UART_Print("1000 KELUAR \n");
 80023bc:	482a      	ldr	r0, [pc, #168]	; (8002468 <Task_Run+0x328>)
 80023be:	f7ff fc25 	bl	8001c0c <UART_Print>
			UART_Print("saldo: Rp2000,- \n");
 80023c2:	4827      	ldr	r0, [pc, #156]	; (8002460 <Task_Run+0x320>)
 80023c4:	f7ff fc22 	bl	8001c0c <UART_Print>
			Plus1000;
 80023c8:	2201      	movs	r2, #1
 80023ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023ce:	4819      	ldr	r0, [pc, #100]	; (8002434 <Task_Run+0x2f4>)
 80023d0:	f7fe f9af 	bl	8000732 <HAL_GPIO_WritePin>
		}
		if(ButtonProses_ok()){
 80023d4:	f000 fbbe 	bl	8002b54 <ButtonProses_ok>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <Task_Run+0x2aa>
			keadaan=Proses;
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <Task_Run+0x2ec>)
 80023e0:	2209      	movs	r2, #9
 80023e2:	701a      	strb	r2, [r3, #0]
			menu=3;
 80023e4:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <Task_Run+0x324>)
 80023e6:	2203      	movs	r2, #3
 80023e8:	601a      	str	r2, [r3, #0]
		}
		if(ButtonBatal_ok()){
 80023ea:	f000 fbdf 	bl	8002bac <ButtonBatal_ok>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8327 	beq.w	8002a44 <Task_Run+0x904>
			keadaan=Batal;
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <Task_Run+0x2ec>)
 80023f8:	220a      	movs	r2, #10
 80023fa:	701a      	strb	r2, [r3, #0]
			UART_Print("2000 KELUAR \n");
 80023fc:	481c      	ldr	r0, [pc, #112]	; (8002470 <Task_Run+0x330>)
 80023fe:	f7ff fc05 	bl	8001c0c <UART_Print>
		}
		break;
 8002402:	e31f      	b.n	8002a44 <Task_Run+0x904>
	}
	case kembali500:{
		Plus500;
 8002404:	2201      	movs	r2, #1
 8002406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800240a:	480a      	ldr	r0, [pc, #40]	; (8002434 <Task_Run+0x2f4>)
 800240c:	f7fe f991 	bl	8000732 <HAL_GPIO_WritePin>
		keadaan=jeda1;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <Task_Run+0x2ec>)
 8002412:	220b      	movs	r2, #11
 8002414:	701a      	strb	r2, [r3, #0]
		break;
 8002416:	e342      	b.n	8002a9e <Task_Run+0x95e>
	}
	case kembali1000:{
		Plus1000;
 8002418:	2201      	movs	r2, #1
 800241a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800241e:	4805      	ldr	r0, [pc, #20]	; (8002434 <Task_Run+0x2f4>)
 8002420:	f7fe f987 	bl	8000732 <HAL_GPIO_WritePin>
		keadaan=jeda1;
 8002424:	4b01      	ldr	r3, [pc, #4]	; (800242c <Task_Run+0x2ec>)
 8002426:	220b      	movs	r2, #11
 8002428:	701a      	strb	r2, [r3, #0]
		break;
 800242a:	e338      	b.n	8002a9e <Task_Run+0x95e>
 800242c:	200000cc 	.word	0x200000cc
 8002430:	40010c00 	.word	0x40010c00
 8002434:	40010800 	.word	0x40010800
 8002438:	08002cd4 	.word	0x08002cd4
 800243c:	200000ca 	.word	0x200000ca
 8002440:	08002d08 	.word	0x08002d08
 8002444:	08002d18 	.word	0x08002d18
 8002448:	08002d30 	.word	0x08002d30
 800244c:	08002d44 	.word	0x08002d44
 8002450:	08002d5c 	.word	0x08002d5c
 8002454:	08002d70 	.word	0x08002d70
 8002458:	08002d84 	.word	0x08002d84
 800245c:	08002d98 	.word	0x08002d98
 8002460:	08002da8 	.word	0x08002da8
 8002464:	200000b8 	.word	0x200000b8
 8002468:	08002dbc 	.word	0x08002dbc
 800246c:	08002dcc 	.word	0x08002dcc
 8002470:	08002ddc 	.word	0x08002ddc
	}
	case Proses:
	{
		UART_Print("Pilih minuman \n");
 8002474:	48aa      	ldr	r0, [pc, #680]	; (8002720 <Task_Run+0x5e0>)
 8002476:	f7ff fbc9 	bl	8001c0c <UART_Print>
		HAL_UART_Receive(&huart1, (uint8_t *)terpilih, 10, 5000);
 800247a:	f241 3388 	movw	r3, #5000	; 0x1388
 800247e:	220a      	movs	r2, #10
 8002480:	49a8      	ldr	r1, [pc, #672]	; (8002724 <Task_Run+0x5e4>)
 8002482:	48a9      	ldr	r0, [pc, #676]	; (8002728 <Task_Run+0x5e8>)
 8002484:	f7ff f9f8 	bl	8001878 <HAL_UART_Receive>
		if( strcmp( terpilih, "0x00000001" ) == 0 ){
 8002488:	49a8      	ldr	r1, [pc, #672]	; (800272c <Task_Run+0x5ec>)
 800248a:	48a6      	ldr	r0, [pc, #664]	; (8002724 <Task_Run+0x5e4>)
 800248c:	f7fd fe5e 	bl	800014c <strcmp>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d157      	bne.n	8002546 <Task_Run+0x406>
			if(menu==1){
 8002496:	4ba6      	ldr	r3, [pc, #664]	; (8002730 <Task_Run+0x5f0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d117      	bne.n	80024ce <Task_Run+0x38e>
				KeluarKaleng;
 800249e:	2201      	movs	r2, #1
 80024a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024a4:	48a3      	ldr	r0, [pc, #652]	; (8002734 <Task_Run+0x5f4>)
 80024a6:	f7fe f944 	bl	8000732 <HAL_GPIO_WritePin>
				UART_Print("Kaleng Minuman Keluar \n");
 80024aa:	48a3      	ldr	r0, [pc, #652]	; (8002738 <Task_Run+0x5f8>)
 80024ac:	f7ff fbae 	bl	8001c0c <UART_Print>
				UART_Print("Coke \n");
 80024b0:	48a2      	ldr	r0, [pc, #648]	; (800273c <Task_Run+0x5fc>)
 80024b2:	f7ff fbab 	bl	8001c0c <UART_Print>
				memset( terpilih, 0, 10 );
 80024b6:	220a      	movs	r2, #10
 80024b8:	2100      	movs	r1, #0
 80024ba:	489a      	ldr	r0, [pc, #616]	; (8002724 <Task_Run+0x5e4>)
 80024bc:	f000 fbec 	bl	8002c98 <memset>
				menu=0;
 80024c0:	4b9b      	ldr	r3, [pc, #620]	; (8002730 <Task_Run+0x5f0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	601a      	str	r2, [r3, #0]
				keadaan=jeda2;
 80024c6:	4b9e      	ldr	r3, [pc, #632]	; (8002740 <Task_Run+0x600>)
 80024c8:	220c      	movs	r2, #12
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e03b      	b.n	8002546 <Task_Run+0x406>
			}
			else{
				if(menu==2){
 80024ce:	4b98      	ldr	r3, [pc, #608]	; (8002730 <Task_Run+0x5f0>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d119      	bne.n	800250a <Task_Run+0x3ca>
					KeluarKaleng;
 80024d6:	2201      	movs	r2, #1
 80024d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024dc:	4895      	ldr	r0, [pc, #596]	; (8002734 <Task_Run+0x5f4>)
 80024de:	f7fe f928 	bl	8000732 <HAL_GPIO_WritePin>
					UART_Print("Kaleng Minuman Keluar \n");
 80024e2:	4895      	ldr	r0, [pc, #596]	; (8002738 <Task_Run+0x5f8>)
 80024e4:	f7ff fb92 	bl	8001c0c <UART_Print>
					UART_Print("Coke \n");
 80024e8:	4894      	ldr	r0, [pc, #592]	; (800273c <Task_Run+0x5fc>)
 80024ea:	f7ff fb8f 	bl	8001c0c <UART_Print>
					UART_Print("kembali 500 \n");
 80024ee:	4895      	ldr	r0, [pc, #596]	; (8002744 <Task_Run+0x604>)
 80024f0:	f7ff fb8c 	bl	8001c0c <UART_Print>
					memset( terpilih, 0, 10 );
 80024f4:	220a      	movs	r2, #10
 80024f6:	2100      	movs	r1, #0
 80024f8:	488a      	ldr	r0, [pc, #552]	; (8002724 <Task_Run+0x5e4>)
 80024fa:	f000 fbcd 	bl	8002c98 <memset>
					menu=0;
 80024fe:	4b8c      	ldr	r3, [pc, #560]	; (8002730 <Task_Run+0x5f0>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
					keadaan=jeda2;
 8002504:	4b8e      	ldr	r3, [pc, #568]	; (8002740 <Task_Run+0x600>)
 8002506:	220c      	movs	r2, #12
 8002508:	701a      	strb	r2, [r3, #0]
				}
				if(menu==3){
 800250a:	4b89      	ldr	r3, [pc, #548]	; (8002730 <Task_Run+0x5f0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d119      	bne.n	8002546 <Task_Run+0x406>
					KeluarKaleng;
 8002512:	2201      	movs	r2, #1
 8002514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002518:	4886      	ldr	r0, [pc, #536]	; (8002734 <Task_Run+0x5f4>)
 800251a:	f7fe f90a 	bl	8000732 <HAL_GPIO_WritePin>
					UART_Print("Kaleng Minuman Keluar \n");
 800251e:	4886      	ldr	r0, [pc, #536]	; (8002738 <Task_Run+0x5f8>)
 8002520:	f7ff fb74 	bl	8001c0c <UART_Print>
					UART_Print("Coke \n");
 8002524:	4885      	ldr	r0, [pc, #532]	; (800273c <Task_Run+0x5fc>)
 8002526:	f7ff fb71 	bl	8001c0c <UART_Print>
					UART_Print("kembali 1000 \n");
 800252a:	4887      	ldr	r0, [pc, #540]	; (8002748 <Task_Run+0x608>)
 800252c:	f7ff fb6e 	bl	8001c0c <UART_Print>
					memset( terpilih, 0, 10 );
 8002530:	220a      	movs	r2, #10
 8002532:	2100      	movs	r1, #0
 8002534:	487b      	ldr	r0, [pc, #492]	; (8002724 <Task_Run+0x5e4>)
 8002536:	f000 fbaf 	bl	8002c98 <memset>
					menu=0;
 800253a:	4b7d      	ldr	r3, [pc, #500]	; (8002730 <Task_Run+0x5f0>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
					keadaan=jeda2;
 8002540:	4b7f      	ldr	r3, [pc, #508]	; (8002740 <Task_Run+0x600>)
 8002542:	220c      	movs	r2, #12
 8002544:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if( strcmp( terpilih, "0x00000002" ) == 0 ){
 8002546:	4981      	ldr	r1, [pc, #516]	; (800274c <Task_Run+0x60c>)
 8002548:	4876      	ldr	r0, [pc, #472]	; (8002724 <Task_Run+0x5e4>)
 800254a:	f7fd fdff 	bl	800014c <strcmp>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d157      	bne.n	8002604 <Task_Run+0x4c4>
			if(menu==1){
 8002554:	4b76      	ldr	r3, [pc, #472]	; (8002730 <Task_Run+0x5f0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d117      	bne.n	800258c <Task_Run+0x44c>
				KeluarKaleng;
 800255c:	2201      	movs	r2, #1
 800255e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002562:	4874      	ldr	r0, [pc, #464]	; (8002734 <Task_Run+0x5f4>)
 8002564:	f7fe f8e5 	bl	8000732 <HAL_GPIO_WritePin>
				UART_Print("Kaleng Minuman Keluar \n");
 8002568:	4873      	ldr	r0, [pc, #460]	; (8002738 <Task_Run+0x5f8>)
 800256a:	f7ff fb4f 	bl	8001c0c <UART_Print>
				UART_Print("Fanta \n");
 800256e:	4878      	ldr	r0, [pc, #480]	; (8002750 <Task_Run+0x610>)
 8002570:	f7ff fb4c 	bl	8001c0c <UART_Print>
				memset( terpilih, 0, 10 );
 8002574:	220a      	movs	r2, #10
 8002576:	2100      	movs	r1, #0
 8002578:	486a      	ldr	r0, [pc, #424]	; (8002724 <Task_Run+0x5e4>)
 800257a:	f000 fb8d 	bl	8002c98 <memset>
				menu=0;
 800257e:	4b6c      	ldr	r3, [pc, #432]	; (8002730 <Task_Run+0x5f0>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
				keadaan=jeda2;
 8002584:	4b6e      	ldr	r3, [pc, #440]	; (8002740 <Task_Run+0x600>)
 8002586:	220c      	movs	r2, #12
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	e03b      	b.n	8002604 <Task_Run+0x4c4>
			}
			else{
				if(menu==2){
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <Task_Run+0x5f0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d119      	bne.n	80025c8 <Task_Run+0x488>
					KeluarKaleng;
 8002594:	2201      	movs	r2, #1
 8002596:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800259a:	4866      	ldr	r0, [pc, #408]	; (8002734 <Task_Run+0x5f4>)
 800259c:	f7fe f8c9 	bl	8000732 <HAL_GPIO_WritePin>
					UART_Print("Kaleng Minuman Keluar \n");
 80025a0:	4865      	ldr	r0, [pc, #404]	; (8002738 <Task_Run+0x5f8>)
 80025a2:	f7ff fb33 	bl	8001c0c <UART_Print>
					UART_Print("Fanta \n");
 80025a6:	486a      	ldr	r0, [pc, #424]	; (8002750 <Task_Run+0x610>)
 80025a8:	f7ff fb30 	bl	8001c0c <UART_Print>
					UART_Print("kembali 500 \n");
 80025ac:	4865      	ldr	r0, [pc, #404]	; (8002744 <Task_Run+0x604>)
 80025ae:	f7ff fb2d 	bl	8001c0c <UART_Print>
					memset( terpilih, 0, 10 );
 80025b2:	220a      	movs	r2, #10
 80025b4:	2100      	movs	r1, #0
 80025b6:	485b      	ldr	r0, [pc, #364]	; (8002724 <Task_Run+0x5e4>)
 80025b8:	f000 fb6e 	bl	8002c98 <memset>
					menu=0;
 80025bc:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <Task_Run+0x5f0>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
					keadaan=jeda2;
 80025c2:	4b5f      	ldr	r3, [pc, #380]	; (8002740 <Task_Run+0x600>)
 80025c4:	220c      	movs	r2, #12
 80025c6:	701a      	strb	r2, [r3, #0]
				}
				if(menu==3){
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <Task_Run+0x5f0>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d119      	bne.n	8002604 <Task_Run+0x4c4>
					KeluarKaleng;
 80025d0:	2201      	movs	r2, #1
 80025d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d6:	4857      	ldr	r0, [pc, #348]	; (8002734 <Task_Run+0x5f4>)
 80025d8:	f7fe f8ab 	bl	8000732 <HAL_GPIO_WritePin>
					UART_Print("Kaleng Minuman Keluar \n");
 80025dc:	4856      	ldr	r0, [pc, #344]	; (8002738 <Task_Run+0x5f8>)
 80025de:	f7ff fb15 	bl	8001c0c <UART_Print>
					UART_Print("Fanta \n");
 80025e2:	485b      	ldr	r0, [pc, #364]	; (8002750 <Task_Run+0x610>)
 80025e4:	f7ff fb12 	bl	8001c0c <UART_Print>
					UART_Print("kembali 1000 \n");
 80025e8:	4857      	ldr	r0, [pc, #348]	; (8002748 <Task_Run+0x608>)
 80025ea:	f7ff fb0f 	bl	8001c0c <UART_Print>
					memset( terpilih, 0, 10 );
 80025ee:	220a      	movs	r2, #10
 80025f0:	2100      	movs	r1, #0
 80025f2:	484c      	ldr	r0, [pc, #304]	; (8002724 <Task_Run+0x5e4>)
 80025f4:	f000 fb50 	bl	8002c98 <memset>
					menu=0;
 80025f8:	4b4d      	ldr	r3, [pc, #308]	; (8002730 <Task_Run+0x5f0>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
					keadaan=jeda2;
 80025fe:	4b50      	ldr	r3, [pc, #320]	; (8002740 <Task_Run+0x600>)
 8002600:	220c      	movs	r2, #12
 8002602:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if( strcmp( terpilih, "0x00000003" ) == 0 ){
 8002604:	4953      	ldr	r1, [pc, #332]	; (8002754 <Task_Run+0x614>)
 8002606:	4847      	ldr	r0, [pc, #284]	; (8002724 <Task_Run+0x5e4>)
 8002608:	f7fd fda0 	bl	800014c <strcmp>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d162      	bne.n	80026d8 <Task_Run+0x598>
			if(menu==2){
 8002612:	4b47      	ldr	r3, [pc, #284]	; (8002730 <Task_Run+0x5f0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d117      	bne.n	800264a <Task_Run+0x50a>
				KeluarKaleng;
 800261a:	2201      	movs	r2, #1
 800261c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002620:	4844      	ldr	r0, [pc, #272]	; (8002734 <Task_Run+0x5f4>)
 8002622:	f7fe f886 	bl	8000732 <HAL_GPIO_WritePin>
				UART_Print("Kaleng Minuman Keluar \n");
 8002626:	4844      	ldr	r0, [pc, #272]	; (8002738 <Task_Run+0x5f8>)
 8002628:	f7ff faf0 	bl	8001c0c <UART_Print>
				UART_Print("Sprite \n");
 800262c:	484a      	ldr	r0, [pc, #296]	; (8002758 <Task_Run+0x618>)
 800262e:	f7ff faed 	bl	8001c0c <UART_Print>
				memset( terpilih, 0, 10 );
 8002632:	220a      	movs	r2, #10
 8002634:	2100      	movs	r1, #0
 8002636:	483b      	ldr	r0, [pc, #236]	; (8002724 <Task_Run+0x5e4>)
 8002638:	f000 fb2e 	bl	8002c98 <memset>
				menu=0;
 800263c:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <Task_Run+0x5f0>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
				keadaan=jeda2;
 8002642:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <Task_Run+0x600>)
 8002644:	220c      	movs	r2, #12
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e046      	b.n	80026d8 <Task_Run+0x598>
			}
			else{
				if(menu==1){
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <Task_Run+0x5f0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d124      	bne.n	800269c <Task_Run+0x55c>
					HAL_GPIO_WritePin(S500_GPIO_Port, S500_Pin, GPIO_PIN_SET);
 8002652:	2201      	movs	r2, #1
 8002654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002658:	4836      	ldr	r0, [pc, #216]	; (8002734 <Task_Run+0x5f4>)
 800265a:	f7fe f86a 	bl	8000732 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(S500_GPIO_Port, S1000_Pin, GPIO_PIN_SET);
 800265e:	2201      	movs	r2, #1
 8002660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002664:	4833      	ldr	r0, [pc, #204]	; (8002734 <Task_Run+0x5f4>)
 8002666:	f7fe f864 	bl	8000732 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(KeluarKoin_GPIO_Port, KeluarKoin_Pin, GPIO_PIN_SET);
 800266a:	2201      	movs	r2, #1
 800266c:	2108      	movs	r1, #8
 800266e:	483b      	ldr	r0, [pc, #236]	; (800275c <Task_Run+0x61c>)
 8002670:	f7fe f85f 	bl	8000732 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(KeluarKaleng_GPIO_Port, KeluarKaleng_Pin, GPIO_PIN_SET);
 8002674:	2201      	movs	r2, #1
 8002676:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800267a:	482e      	ldr	r0, [pc, #184]	; (8002734 <Task_Run+0x5f4>)
 800267c:	f7fe f859 	bl	8000732 <HAL_GPIO_WritePin>
					UART_Print("uang kurang \n");
 8002680:	4837      	ldr	r0, [pc, #220]	; (8002760 <Task_Run+0x620>)
 8002682:	f7ff fac3 	bl	8001c0c <UART_Print>
					memset( terpilih, 0, 10 );
 8002686:	220a      	movs	r2, #10
 8002688:	2100      	movs	r1, #0
 800268a:	4826      	ldr	r0, [pc, #152]	; (8002724 <Task_Run+0x5e4>)
 800268c:	f000 fb04 	bl	8002c98 <memset>
					menu=0;
 8002690:	4b27      	ldr	r3, [pc, #156]	; (8002730 <Task_Run+0x5f0>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
					keadaan=jeda3;
 8002696:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <Task_Run+0x600>)
 8002698:	220d      	movs	r2, #13
 800269a:	701a      	strb	r2, [r3, #0]
				}
				if(menu==3){
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <Task_Run+0x5f0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d119      	bne.n	80026d8 <Task_Run+0x598>
					KeluarKaleng;
 80026a4:	2201      	movs	r2, #1
 80026a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026aa:	4822      	ldr	r0, [pc, #136]	; (8002734 <Task_Run+0x5f4>)
 80026ac:	f7fe f841 	bl	8000732 <HAL_GPIO_WritePin>
					UART_Print("Kaleng Minuman Keluar \n");
 80026b0:	4821      	ldr	r0, [pc, #132]	; (8002738 <Task_Run+0x5f8>)
 80026b2:	f7ff faab 	bl	8001c0c <UART_Print>
					UART_Print("Sprite \n");
 80026b6:	4828      	ldr	r0, [pc, #160]	; (8002758 <Task_Run+0x618>)
 80026b8:	f7ff faa8 	bl	8001c0c <UART_Print>
					UART_Print("kembali 500 \n");
 80026bc:	4821      	ldr	r0, [pc, #132]	; (8002744 <Task_Run+0x604>)
 80026be:	f7ff faa5 	bl	8001c0c <UART_Print>
					memset( terpilih, 0, 10 );
 80026c2:	220a      	movs	r2, #10
 80026c4:	2100      	movs	r1, #0
 80026c6:	4817      	ldr	r0, [pc, #92]	; (8002724 <Task_Run+0x5e4>)
 80026c8:	f000 fae6 	bl	8002c98 <memset>
					menu=0;
 80026cc:	4b18      	ldr	r3, [pc, #96]	; (8002730 <Task_Run+0x5f0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
					keadaan=jeda2;
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <Task_Run+0x600>)
 80026d4:	220c      	movs	r2, #12
 80026d6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if( strcmp( terpilih, "0x00000004" ) == 0 ){
 80026d8:	4922      	ldr	r1, [pc, #136]	; (8002764 <Task_Run+0x624>)
 80026da:	4812      	ldr	r0, [pc, #72]	; (8002724 <Task_Run+0x5e4>)
 80026dc:	f7fd fd36 	bl	800014c <strcmp>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 8089 	bne.w	80027fa <Task_Run+0x6ba>
			if(menu==2){
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <Task_Run+0x5f0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d13d      	bne.n	800276c <Task_Run+0x62c>
				KeluarKaleng;
 80026f0:	2201      	movs	r2, #1
 80026f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026f6:	480f      	ldr	r0, [pc, #60]	; (8002734 <Task_Run+0x5f4>)
 80026f8:	f7fe f81b 	bl	8000732 <HAL_GPIO_WritePin>
				UART_Print("Kaleng Minuman Keluar \n");
 80026fc:	480e      	ldr	r0, [pc, #56]	; (8002738 <Task_Run+0x5f8>)
 80026fe:	f7ff fa85 	bl	8001c0c <UART_Print>
				UART_Print("Pepsi \n");
 8002702:	4819      	ldr	r0, [pc, #100]	; (8002768 <Task_Run+0x628>)
 8002704:	f7ff fa82 	bl	8001c0c <UART_Print>
				memset( terpilih, 0, 10 );
 8002708:	220a      	movs	r2, #10
 800270a:	2100      	movs	r1, #0
 800270c:	4805      	ldr	r0, [pc, #20]	; (8002724 <Task_Run+0x5e4>)
 800270e:	f000 fac3 	bl	8002c98 <memset>
				menu=0;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <Task_Run+0x5f0>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
				keadaan=jeda2;
 8002718:	4b09      	ldr	r3, [pc, #36]	; (8002740 <Task_Run+0x600>)
 800271a:	220c      	movs	r2, #12
 800271c:	701a      	strb	r2, [r3, #0]
 800271e:	e06c      	b.n	80027fa <Task_Run+0x6ba>
 8002720:	08002dec 	.word	0x08002dec
 8002724:	200000c0 	.word	0x200000c0
 8002728:	20000034 	.word	0x20000034
 800272c:	08002dfc 	.word	0x08002dfc
 8002730:	200000b8 	.word	0x200000b8
 8002734:	40010800 	.word	0x40010800
 8002738:	08002e08 	.word	0x08002e08
 800273c:	08002e20 	.word	0x08002e20
 8002740:	200000cc 	.word	0x200000cc
 8002744:	08002e28 	.word	0x08002e28
 8002748:	08002e38 	.word	0x08002e38
 800274c:	08002e48 	.word	0x08002e48
 8002750:	08002e54 	.word	0x08002e54
 8002754:	08002e5c 	.word	0x08002e5c
 8002758:	08002e68 	.word	0x08002e68
 800275c:	40010c00 	.word	0x40010c00
 8002760:	08002e74 	.word	0x08002e74
 8002764:	08002e84 	.word	0x08002e84
 8002768:	08002e90 	.word	0x08002e90
			}
			else{
				if(menu==1){
 800276c:	4bb8      	ldr	r3, [pc, #736]	; (8002a50 <Task_Run+0x910>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d124      	bne.n	80027be <Task_Run+0x67e>
					HAL_GPIO_WritePin(S500_GPIO_Port, S500_Pin, GPIO_PIN_SET);
 8002774:	2201      	movs	r2, #1
 8002776:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800277a:	48b6      	ldr	r0, [pc, #728]	; (8002a54 <Task_Run+0x914>)
 800277c:	f7fd ffd9 	bl	8000732 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(S500_GPIO_Port, S1000_Pin, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002786:	48b3      	ldr	r0, [pc, #716]	; (8002a54 <Task_Run+0x914>)
 8002788:	f7fd ffd3 	bl	8000732 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(KeluarKoin_GPIO_Port, KeluarKoin_Pin, GPIO_PIN_SET);
 800278c:	2201      	movs	r2, #1
 800278e:	2108      	movs	r1, #8
 8002790:	48b1      	ldr	r0, [pc, #708]	; (8002a58 <Task_Run+0x918>)
 8002792:	f7fd ffce 	bl	8000732 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(KeluarKaleng_GPIO_Port, KeluarKaleng_Pin, GPIO_PIN_SET);
 8002796:	2201      	movs	r2, #1
 8002798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800279c:	48ad      	ldr	r0, [pc, #692]	; (8002a54 <Task_Run+0x914>)
 800279e:	f7fd ffc8 	bl	8000732 <HAL_GPIO_WritePin>
					UART_Print("uang kurang \n");
 80027a2:	48ae      	ldr	r0, [pc, #696]	; (8002a5c <Task_Run+0x91c>)
 80027a4:	f7ff fa32 	bl	8001c0c <UART_Print>
					memset( terpilih, 0, 10 );
 80027a8:	220a      	movs	r2, #10
 80027aa:	2100      	movs	r1, #0
 80027ac:	48ac      	ldr	r0, [pc, #688]	; (8002a60 <Task_Run+0x920>)
 80027ae:	f000 fa73 	bl	8002c98 <memset>
					menu=0;
 80027b2:	4ba7      	ldr	r3, [pc, #668]	; (8002a50 <Task_Run+0x910>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
					keadaan=jeda3;
 80027b8:	4baa      	ldr	r3, [pc, #680]	; (8002a64 <Task_Run+0x924>)
 80027ba:	220d      	movs	r2, #13
 80027bc:	701a      	strb	r2, [r3, #0]
				}
				if(menu==3){
 80027be:	4ba4      	ldr	r3, [pc, #656]	; (8002a50 <Task_Run+0x910>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2b03      	cmp	r3, #3
 80027c4:	d119      	bne.n	80027fa <Task_Run+0x6ba>
					KeluarKaleng;
 80027c6:	2201      	movs	r2, #1
 80027c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027cc:	48a1      	ldr	r0, [pc, #644]	; (8002a54 <Task_Run+0x914>)
 80027ce:	f7fd ffb0 	bl	8000732 <HAL_GPIO_WritePin>
					UART_Print("Kaleng Minuman Keluar \n");
 80027d2:	48a5      	ldr	r0, [pc, #660]	; (8002a68 <Task_Run+0x928>)
 80027d4:	f7ff fa1a 	bl	8001c0c <UART_Print>
					UART_Print("Pepsi \n");
 80027d8:	48a4      	ldr	r0, [pc, #656]	; (8002a6c <Task_Run+0x92c>)
 80027da:	f7ff fa17 	bl	8001c0c <UART_Print>
					UART_Print("kembali 500 \n");
 80027de:	48a4      	ldr	r0, [pc, #656]	; (8002a70 <Task_Run+0x930>)
 80027e0:	f7ff fa14 	bl	8001c0c <UART_Print>
					memset( terpilih, 0, 10 );
 80027e4:	220a      	movs	r2, #10
 80027e6:	2100      	movs	r1, #0
 80027e8:	489d      	ldr	r0, [pc, #628]	; (8002a60 <Task_Run+0x920>)
 80027ea:	f000 fa55 	bl	8002c98 <memset>
					menu=0;
 80027ee:	4b98      	ldr	r3, [pc, #608]	; (8002a50 <Task_Run+0x910>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
					keadaan=jeda2;
 80027f4:	4b9b      	ldr	r3, [pc, #620]	; (8002a64 <Task_Run+0x924>)
 80027f6:	220c      	movs	r2, #12
 80027f8:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if( strcmp( terpilih, "0x00000005" ) == 0 ){
 80027fa:	499e      	ldr	r1, [pc, #632]	; (8002a74 <Task_Run+0x934>)
 80027fc:	4898      	ldr	r0, [pc, #608]	; (8002a60 <Task_Run+0x920>)
 80027fe:	f7fd fca5 	bl	800014c <strcmp>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	f040 811f 	bne.w	8002a48 <Task_Run+0x908>
			if(menu==3){
 800280a:	4b91      	ldr	r3, [pc, #580]	; (8002a50 <Task_Run+0x910>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b03      	cmp	r3, #3
 8002810:	d117      	bne.n	8002842 <Task_Run+0x702>
				KeluarKaleng;
 8002812:	2201      	movs	r2, #1
 8002814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002818:	488e      	ldr	r0, [pc, #568]	; (8002a54 <Task_Run+0x914>)
 800281a:	f7fd ff8a 	bl	8000732 <HAL_GPIO_WritePin>
				UART_Print("Kaleng Minuman Keluar \n");
 800281e:	4892      	ldr	r0, [pc, #584]	; (8002a68 <Task_Run+0x928>)
 8002820:	f7ff f9f4 	bl	8001c0c <UART_Print>
				UART_Print("Pocari Sweat \n");
 8002824:	4894      	ldr	r0, [pc, #592]	; (8002a78 <Task_Run+0x938>)
 8002826:	f7ff f9f1 	bl	8001c0c <UART_Print>
				memset( terpilih, 0, 10 );
 800282a:	220a      	movs	r2, #10
 800282c:	2100      	movs	r1, #0
 800282e:	488c      	ldr	r0, [pc, #560]	; (8002a60 <Task_Run+0x920>)
 8002830:	f000 fa32 	bl	8002c98 <memset>
				menu=0;
 8002834:	4b86      	ldr	r3, [pc, #536]	; (8002a50 <Task_Run+0x910>)
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
				keadaan=jeda2;
 800283a:	4b8a      	ldr	r3, [pc, #552]	; (8002a64 <Task_Run+0x924>)
 800283c:	220c      	movs	r2, #12
 800283e:	701a      	strb	r2, [r3, #0]
					menu=0;
					keadaan=jeda4;
				}
			}
		}
		break;
 8002840:	e102      	b.n	8002a48 <Task_Run+0x908>
				if(menu==1){
 8002842:	4b83      	ldr	r3, [pc, #524]	; (8002a50 <Task_Run+0x910>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d124      	bne.n	8002894 <Task_Run+0x754>
					HAL_GPIO_WritePin(S500_GPIO_Port, S500_Pin, GPIO_PIN_SET);
 800284a:	2201      	movs	r2, #1
 800284c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002850:	4880      	ldr	r0, [pc, #512]	; (8002a54 <Task_Run+0x914>)
 8002852:	f7fd ff6e 	bl	8000732 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(S500_GPIO_Port, S1000_Pin, GPIO_PIN_SET);
 8002856:	2201      	movs	r2, #1
 8002858:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800285c:	487d      	ldr	r0, [pc, #500]	; (8002a54 <Task_Run+0x914>)
 800285e:	f7fd ff68 	bl	8000732 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(KeluarKoin_GPIO_Port, KeluarKoin_Pin, GPIO_PIN_SET);
 8002862:	2201      	movs	r2, #1
 8002864:	2108      	movs	r1, #8
 8002866:	487c      	ldr	r0, [pc, #496]	; (8002a58 <Task_Run+0x918>)
 8002868:	f7fd ff63 	bl	8000732 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(KeluarKaleng_GPIO_Port, KeluarKaleng_Pin, GPIO_PIN_SET);
 800286c:	2201      	movs	r2, #1
 800286e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002872:	4878      	ldr	r0, [pc, #480]	; (8002a54 <Task_Run+0x914>)
 8002874:	f7fd ff5d 	bl	8000732 <HAL_GPIO_WritePin>
					UART_Print("uang kurang \n");
 8002878:	4878      	ldr	r0, [pc, #480]	; (8002a5c <Task_Run+0x91c>)
 800287a:	f7ff f9c7 	bl	8001c0c <UART_Print>
					memset( terpilih, 0, 10 );
 800287e:	220a      	movs	r2, #10
 8002880:	2100      	movs	r1, #0
 8002882:	4877      	ldr	r0, [pc, #476]	; (8002a60 <Task_Run+0x920>)
 8002884:	f000 fa08 	bl	8002c98 <memset>
					menu=0;
 8002888:	4b71      	ldr	r3, [pc, #452]	; (8002a50 <Task_Run+0x910>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
					keadaan=jeda3;
 800288e:	4b75      	ldr	r3, [pc, #468]	; (8002a64 <Task_Run+0x924>)
 8002890:	220d      	movs	r2, #13
 8002892:	701a      	strb	r2, [r3, #0]
				if(menu==2){
 8002894:	4b6e      	ldr	r3, [pc, #440]	; (8002a50 <Task_Run+0x910>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b02      	cmp	r3, #2
 800289a:	f040 80d5 	bne.w	8002a48 <Task_Run+0x908>
					HAL_GPIO_WritePin(S500_GPIO_Port, S500_Pin, GPIO_PIN_SET);
 800289e:	2201      	movs	r2, #1
 80028a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028a4:	486b      	ldr	r0, [pc, #428]	; (8002a54 <Task_Run+0x914>)
 80028a6:	f7fd ff44 	bl	8000732 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(S500_GPIO_Port, S1000_Pin, GPIO_PIN_SET);
 80028aa:	2201      	movs	r2, #1
 80028ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028b0:	4868      	ldr	r0, [pc, #416]	; (8002a54 <Task_Run+0x914>)
 80028b2:	f7fd ff3e 	bl	8000732 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(KeluarKoin_GPIO_Port, KeluarKoin_Pin, GPIO_PIN_SET);
 80028b6:	2201      	movs	r2, #1
 80028b8:	2108      	movs	r1, #8
 80028ba:	4867      	ldr	r0, [pc, #412]	; (8002a58 <Task_Run+0x918>)
 80028bc:	f7fd ff39 	bl	8000732 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(KeluarKaleng_GPIO_Port, KeluarKaleng_Pin, GPIO_PIN_SET);
 80028c0:	2201      	movs	r2, #1
 80028c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028c6:	4863      	ldr	r0, [pc, #396]	; (8002a54 <Task_Run+0x914>)
 80028c8:	f7fd ff33 	bl	8000732 <HAL_GPIO_WritePin>
					UART_Print("uang kurang \n");
 80028cc:	4863      	ldr	r0, [pc, #396]	; (8002a5c <Task_Run+0x91c>)
 80028ce:	f7ff f99d 	bl	8001c0c <UART_Print>
					memset( terpilih, 0, 10 );
 80028d2:	220a      	movs	r2, #10
 80028d4:	2100      	movs	r1, #0
 80028d6:	4862      	ldr	r0, [pc, #392]	; (8002a60 <Task_Run+0x920>)
 80028d8:	f000 f9de 	bl	8002c98 <memset>
					menu=0;
 80028dc:	4b5c      	ldr	r3, [pc, #368]	; (8002a50 <Task_Run+0x910>)
 80028de:	2200      	movs	r2, #0
 80028e0:	601a      	str	r2, [r3, #0]
					keadaan=jeda4;
 80028e2:	4b60      	ldr	r3, [pc, #384]	; (8002a64 <Task_Run+0x924>)
 80028e4:	220e      	movs	r2, #14
 80028e6:	701a      	strb	r2, [r3, #0]
		break;
 80028e8:	e0ae      	b.n	8002a48 <Task_Run+0x908>
	}
	case Batal:
	{
		KeluarKembalian;
 80028ea:	2201      	movs	r2, #1
 80028ec:	2108      	movs	r1, #8
 80028ee:	485a      	ldr	r0, [pc, #360]	; (8002a58 <Task_Run+0x918>)
 80028f0:	f7fd ff1f 	bl	8000732 <HAL_GPIO_WritePin>
		UART_Print("Koin Yang Telah Masuk Keluar \n");
 80028f4:	4861      	ldr	r0, [pc, #388]	; (8002a7c <Task_Run+0x93c>)
 80028f6:	f7ff f989 	bl	8001c0c <UART_Print>
		keadaan=jeda2;
 80028fa:	4b5a      	ldr	r3, [pc, #360]	; (8002a64 <Task_Run+0x924>)
 80028fc:	220c      	movs	r2, #12
 80028fe:	701a      	strb	r2, [r3, #0]
		break;
 8002900:	e0cd      	b.n	8002a9e <Task_Run+0x95e>
	}
	case jeda1:
	{
		if(++jeda01==batas){
 8002902:	4b5f      	ldr	r3, [pc, #380]	; (8002a80 <Task_Run+0x940>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	b29b      	uxth	r3, r3
 8002908:	3301      	adds	r3, #1
 800290a:	b29b      	uxth	r3, r3
 800290c:	4a5c      	ldr	r2, [pc, #368]	; (8002a80 <Task_Run+0x940>)
 800290e:	4619      	mov	r1, r3
 8002910:	8011      	strh	r1, [r2, #0]
 8002912:	4a5c      	ldr	r2, [pc, #368]	; (8002a84 <Task_Run+0x944>)
 8002914:	8812      	ldrh	r2, [r2, #0]
 8002916:	b292      	uxth	r2, r2
 8002918:	4293      	cmp	r3, r2
 800291a:	f040 8097 	bne.w	8002a4c <Task_Run+0x90c>
			offPlus500;
 800291e:	2200      	movs	r2, #0
 8002920:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002924:	484b      	ldr	r0, [pc, #300]	; (8002a54 <Task_Run+0x914>)
 8002926:	f7fd ff04 	bl	8000732 <HAL_GPIO_WritePin>
			offPlus1000;
 800292a:	2200      	movs	r2, #0
 800292c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002930:	4848      	ldr	r0, [pc, #288]	; (8002a54 <Task_Run+0x914>)
 8002932:	f7fd fefe 	bl	8000732 <HAL_GPIO_WritePin>
			jeda01=0;
 8002936:	4b52      	ldr	r3, [pc, #328]	; (8002a80 <Task_Run+0x940>)
 8002938:	2200      	movs	r2, #0
 800293a:	801a      	strh	r2, [r3, #0]
			keadaan=s2000;
 800293c:	4b49      	ldr	r3, [pc, #292]	; (8002a64 <Task_Run+0x924>)
 800293e:	2206      	movs	r2, #6
 8002940:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002942:	e083      	b.n	8002a4c <Task_Run+0x90c>
	}
	case jeda2:
	{
		if(++jeda02==batas){
 8002944:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <Task_Run+0x948>)
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	3301      	adds	r3, #1
 800294c:	b29b      	uxth	r3, r3
 800294e:	4a4e      	ldr	r2, [pc, #312]	; (8002a88 <Task_Run+0x948>)
 8002950:	4619      	mov	r1, r3
 8002952:	8011      	strh	r1, [r2, #0]
 8002954:	4a4b      	ldr	r2, [pc, #300]	; (8002a84 <Task_Run+0x944>)
 8002956:	8812      	ldrh	r2, [r2, #0]
 8002958:	b292      	uxth	r2, r2
 800295a:	4293      	cmp	r3, r2
 800295c:	f040 809a 	bne.w	8002a94 <Task_Run+0x954>
			offKeluarKembalian;
 8002960:	2200      	movs	r2, #0
 8002962:	2108      	movs	r1, #8
 8002964:	483c      	ldr	r0, [pc, #240]	; (8002a58 <Task_Run+0x918>)
 8002966:	f7fd fee4 	bl	8000732 <HAL_GPIO_WritePin>
			offKeluarKaleng;
 800296a:	2200      	movs	r2, #0
 800296c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002970:	4838      	ldr	r0, [pc, #224]	; (8002a54 <Task_Run+0x914>)
 8002972:	f7fd fede 	bl	8000732 <HAL_GPIO_WritePin>
			jeda02=0;
 8002976:	4b44      	ldr	r3, [pc, #272]	; (8002a88 <Task_Run+0x948>)
 8002978:	2200      	movs	r2, #0
 800297a:	801a      	strh	r2, [r3, #0]
			keadaan=start;
 800297c:	4b39      	ldr	r3, [pc, #228]	; (8002a64 <Task_Run+0x924>)
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002982:	e087      	b.n	8002a94 <Task_Run+0x954>
	}
	case jeda3:
	{
		if(++jeda03==batas){
 8002984:	4b41      	ldr	r3, [pc, #260]	; (8002a8c <Task_Run+0x94c>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	3301      	adds	r3, #1
 800298c:	b29b      	uxth	r3, r3
 800298e:	4a3f      	ldr	r2, [pc, #252]	; (8002a8c <Task_Run+0x94c>)
 8002990:	4619      	mov	r1, r3
 8002992:	8011      	strh	r1, [r2, #0]
 8002994:	4a3b      	ldr	r2, [pc, #236]	; (8002a84 <Task_Run+0x944>)
 8002996:	8812      	ldrh	r2, [r2, #0]
 8002998:	b292      	uxth	r2, r2
 800299a:	4293      	cmp	r3, r2
 800299c:	d17c      	bne.n	8002a98 <Task_Run+0x958>
			HAL_GPIO_WritePin(S500_GPIO_Port, S500_Pin, GPIO_PIN_RESET);
 800299e:	2200      	movs	r2, #0
 80029a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029a4:	482b      	ldr	r0, [pc, #172]	; (8002a54 <Task_Run+0x914>)
 80029a6:	f7fd fec4 	bl	8000732 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S500_GPIO_Port, S1000_Pin, GPIO_PIN_RESET);
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029b0:	4828      	ldr	r0, [pc, #160]	; (8002a54 <Task_Run+0x914>)
 80029b2:	f7fd febe 	bl	8000732 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KeluarKoin_GPIO_Port, KeluarKoin_Pin, GPIO_PIN_RESET);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2108      	movs	r1, #8
 80029ba:	4827      	ldr	r0, [pc, #156]	; (8002a58 <Task_Run+0x918>)
 80029bc:	f7fd feb9 	bl	8000732 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KeluarKaleng_GPIO_Port, KeluarKaleng_Pin, GPIO_PIN_RESET);
 80029c0:	2200      	movs	r2, #0
 80029c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029c6:	4823      	ldr	r0, [pc, #140]	; (8002a54 <Task_Run+0x914>)
 80029c8:	f7fd feb3 	bl	8000732 <HAL_GPIO_WritePin>
			jeda03=0;
 80029cc:	4b2f      	ldr	r3, [pc, #188]	; (8002a8c <Task_Run+0x94c>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	801a      	strh	r2, [r3, #0]
			keadaan=s1000;
 80029d2:	4b24      	ldr	r3, [pc, #144]	; (8002a64 <Task_Run+0x924>)
 80029d4:	2204      	movs	r2, #4
 80029d6:	701a      	strb	r2, [r3, #0]
		}
		break;
 80029d8:	e05e      	b.n	8002a98 <Task_Run+0x958>
	}
	case jeda4:
	{
		if(++jeda04==batas){
 80029da:	4b2d      	ldr	r3, [pc, #180]	; (8002a90 <Task_Run+0x950>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3301      	adds	r3, #1
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	4a2a      	ldr	r2, [pc, #168]	; (8002a90 <Task_Run+0x950>)
 80029e6:	4619      	mov	r1, r3
 80029e8:	8011      	strh	r1, [r2, #0]
 80029ea:	4a26      	ldr	r2, [pc, #152]	; (8002a84 <Task_Run+0x944>)
 80029ec:	8812      	ldrh	r2, [r2, #0]
 80029ee:	b292      	uxth	r2, r2
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d153      	bne.n	8002a9c <Task_Run+0x95c>
			HAL_GPIO_WritePin(S500_GPIO_Port, S500_Pin, GPIO_PIN_RESET);
 80029f4:	2200      	movs	r2, #0
 80029f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029fa:	4816      	ldr	r0, [pc, #88]	; (8002a54 <Task_Run+0x914>)
 80029fc:	f7fd fe99 	bl	8000732 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(S500_GPIO_Port, S1000_Pin, GPIO_PIN_RESET);
 8002a00:	2200      	movs	r2, #0
 8002a02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a06:	4813      	ldr	r0, [pc, #76]	; (8002a54 <Task_Run+0x914>)
 8002a08:	f7fd fe93 	bl	8000732 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KeluarKoin_GPIO_Port, KeluarKoin_Pin, GPIO_PIN_RESET);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2108      	movs	r1, #8
 8002a10:	4811      	ldr	r0, [pc, #68]	; (8002a58 <Task_Run+0x918>)
 8002a12:	f7fd fe8e 	bl	8000732 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(KeluarKaleng_GPIO_Port, KeluarKaleng_Pin, GPIO_PIN_RESET);
 8002a16:	2200      	movs	r2, #0
 8002a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a1c:	480d      	ldr	r0, [pc, #52]	; (8002a54 <Task_Run+0x914>)
 8002a1e:	f7fd fe88 	bl	8000732 <HAL_GPIO_WritePin>
			jeda04=0;
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <Task_Run+0x950>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	801a      	strh	r2, [r3, #0]
			keadaan=s1500;
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <Task_Run+0x924>)
 8002a2a:	2205      	movs	r2, #5
 8002a2c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002a2e:	e035      	b.n	8002a9c <Task_Run+0x95c>
		break;
 8002a30:	bf00      	nop
 8002a32:	e034      	b.n	8002a9e <Task_Run+0x95e>
		break;
 8002a34:	bf00      	nop
 8002a36:	e032      	b.n	8002a9e <Task_Run+0x95e>
		break;
 8002a38:	bf00      	nop
 8002a3a:	e030      	b.n	8002a9e <Task_Run+0x95e>
		break;
 8002a3c:	bf00      	nop
 8002a3e:	e02e      	b.n	8002a9e <Task_Run+0x95e>
		break;
 8002a40:	bf00      	nop
 8002a42:	e02c      	b.n	8002a9e <Task_Run+0x95e>
		break;
 8002a44:	bf00      	nop
 8002a46:	e02a      	b.n	8002a9e <Task_Run+0x95e>
		break;
 8002a48:	bf00      	nop
 8002a4a:	e028      	b.n	8002a9e <Task_Run+0x95e>
		break;
 8002a4c:	bf00      	nop
 8002a4e:	e026      	b.n	8002a9e <Task_Run+0x95e>
 8002a50:	200000b8 	.word	0x200000b8
 8002a54:	40010800 	.word	0x40010800
 8002a58:	40010c00 	.word	0x40010c00
 8002a5c:	08002e74 	.word	0x08002e74
 8002a60:	200000c0 	.word	0x200000c0
 8002a64:	200000cc 	.word	0x200000cc
 8002a68:	08002e08 	.word	0x08002e08
 8002a6c:	08002e90 	.word	0x08002e90
 8002a70:	08002e28 	.word	0x08002e28
 8002a74:	08002e98 	.word	0x08002e98
 8002a78:	08002ea4 	.word	0x08002ea4
 8002a7c:	08002eb4 	.word	0x08002eb4
 8002a80:	200000b6 	.word	0x200000b6
 8002a84:	2000000c 	.word	0x2000000c
 8002a88:	200000bc 	.word	0x200000bc
 8002a8c:	200000be 	.word	0x200000be
 8002a90:	200000b4 	.word	0x200000b4
		break;
 8002a94:	bf00      	nop
 8002a96:	e002      	b.n	8002a9e <Task_Run+0x95e>
		break;
 8002a98:	bf00      	nop
 8002a9a:	e000      	b.n	8002a9e <Task_Run+0x95e>
		break;
 8002a9c:	bf00      	nop
	}
	}
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop

08002aa4 <Button500_ok>:

unsigned char Button500_ok(void){
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
	static unsigned char debounce1=0xFF;
	unsigned char detectedFLag=0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(a500_GPIO_Port, a500_Pin)== GPIO_PIN_RESET){
 8002aae:	2108      	movs	r1, #8
 8002ab0:	4810      	ldr	r0, [pc, #64]	; (8002af4 <Button500_ok+0x50>)
 8002ab2:	f7fd fe27 	bl	8000704 <HAL_GPIO_ReadPin>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d106      	bne.n	8002aca <Button500_ok+0x26>
		debounce1=(debounce1<<1);
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <Button500_ok+0x54>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	; (8002af8 <Button500_ok+0x54>)
 8002ac6:	701a      	strb	r2, [r3, #0]
 8002ac8:	e009      	b.n	8002ade <Button500_ok+0x3a>
	} else {
		debounce1= (debounce1<<1)|1;
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <Button500_ok+0x54>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	b25b      	sxtb	r3, r3
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <Button500_ok+0x54>)
 8002adc:	701a      	strb	r2, [r3, #0]
	}
	if (debounce1==0x03) {
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <Button500_ok+0x54>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b03      	cmp	r3, #3
 8002ae4:	d101      	bne.n	8002aea <Button500_ok+0x46>
		//printf(" \n\r");
		detectedFLag=1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8002aea:	79fb      	ldrb	r3, [r7, #7]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40010800 	.word	0x40010800
 8002af8:	2000000e 	.word	0x2000000e

08002afc <Button1000_ok>:

unsigned char Button1000_ok(void){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
	static unsigned char debounce2=0xFF;
	unsigned char detectedFLag=0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(a1000_GPIO_Port, a1000_Pin)== GPIO_PIN_RESET){
 8002b06:	2110      	movs	r1, #16
 8002b08:	4810      	ldr	r0, [pc, #64]	; (8002b4c <Button1000_ok+0x50>)
 8002b0a:	f7fd fdfb 	bl	8000704 <HAL_GPIO_ReadPin>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d106      	bne.n	8002b22 <Button1000_ok+0x26>
		debounce2=(debounce2<<1);
 8002b14:	4b0e      	ldr	r3, [pc, #56]	; (8002b50 <Button1000_ok+0x54>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	; (8002b50 <Button1000_ok+0x54>)
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	e009      	b.n	8002b36 <Button1000_ok+0x3a>
	} else {
		debounce2= (debounce2<<1)|1;
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <Button1000_ok+0x54>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <Button1000_ok+0x54>)
 8002b34:	701a      	strb	r2, [r3, #0]
	}
	if (debounce2==0x03) {
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <Button1000_ok+0x54>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d101      	bne.n	8002b42 <Button1000_ok+0x46>
		//printf(" \n\r");
		detectedFLag=1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8002b42:	79fb      	ldrb	r3, [r7, #7]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40010800 	.word	0x40010800
 8002b50:	2000000f 	.word	0x2000000f

08002b54 <ButtonProses_ok>:

unsigned char ButtonProses_ok(void){
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
	static unsigned char debounce3=0xFF;
	unsigned char detectedFLag=0;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(PROSES_GPIO_Port, PROSES_Pin)== GPIO_PIN_RESET){
 8002b5e:	2120      	movs	r1, #32
 8002b60:	4810      	ldr	r0, [pc, #64]	; (8002ba4 <ButtonProses_ok+0x50>)
 8002b62:	f7fd fdcf 	bl	8000704 <HAL_GPIO_ReadPin>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d106      	bne.n	8002b7a <ButtonProses_ok+0x26>
		debounce3=(debounce3<<1);
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <ButtonProses_ok+0x54>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <ButtonProses_ok+0x54>)
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	e009      	b.n	8002b8e <ButtonProses_ok+0x3a>
	} else {
		debounce3=(debounce3<<1)|1;
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <ButtonProses_ok+0x54>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	b25b      	sxtb	r3, r3
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <ButtonProses_ok+0x54>)
 8002b8c:	701a      	strb	r2, [r3, #0]
	}
	if (debounce3==0x03) {
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <ButtonProses_ok+0x54>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d101      	bne.n	8002b9a <ButtonProses_ok+0x46>
		//printf(" \n\r");
		detectedFLag=1;
 8002b96:	2301      	movs	r3, #1
 8002b98:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	40010800 	.word	0x40010800
 8002ba8:	20000010 	.word	0x20000010

08002bac <ButtonBatal_ok>:

unsigned char ButtonBatal_ok(void){
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
	static unsigned char debounce4=0xFF;
	unsigned char detectedFLag=0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	71fb      	strb	r3, [r7, #7]
	if(HAL_GPIO_ReadPin(BATAL_GPIO_Port, BATAL_Pin)== GPIO_PIN_RESET){
 8002bb6:	2140      	movs	r1, #64	; 0x40
 8002bb8:	4810      	ldr	r0, [pc, #64]	; (8002bfc <ButtonBatal_ok+0x50>)
 8002bba:	f7fd fda3 	bl	8000704 <HAL_GPIO_ReadPin>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d106      	bne.n	8002bd2 <ButtonBatal_ok+0x26>
		debounce4=(debounce4<<1);
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <ButtonBatal_ok+0x54>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <ButtonBatal_ok+0x54>)
 8002bce:	701a      	strb	r2, [r3, #0]
 8002bd0:	e009      	b.n	8002be6 <ButtonBatal_ok+0x3a>
	} else {
		debounce4= (debounce4<<1)|1;
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <ButtonBatal_ok+0x54>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	b25b      	sxtb	r3, r3
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <ButtonBatal_ok+0x54>)
 8002be4:	701a      	strb	r2, [r3, #0]
	}
	if (debounce4==0x03) {
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <ButtonBatal_ok+0x54>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d101      	bne.n	8002bf2 <ButtonBatal_ok+0x46>
		//printf(" \n\r");
		detectedFLag=1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	71fb      	strb	r3, [r7, #7]
	}
	return detectedFLag;
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40010800 	.word	0x40010800
 8002c00:	20000011 	.word	0x20000011

08002c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c04:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c06:	e003      	b.n	8002c10 <LoopCopyDataInit>

08002c08 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c0a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c0c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c0e:	3104      	adds	r1, #4

08002c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c10:	480a      	ldr	r0, [pc, #40]	; (8002c3c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c14:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c16:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c18:	d3f6      	bcc.n	8002c08 <CopyDataInit>
  ldr r2, =_sbss
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c1c:	e002      	b.n	8002c24 <LoopFillZerobss>

08002c1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c1e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c20:	f842 3b04 	str.w	r3, [r2], #4

08002c24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c24:	4b08      	ldr	r3, [pc, #32]	; (8002c48 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c26:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c28:	d3f9      	bcc.n	8002c1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c2a:	f7ff fa45 	bl	80020b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2e:	f000 f80f 	bl	8002c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c32:	f7fe ffff 	bl	8001c34 <main>
  bx lr
 8002c36:	4770      	bx	lr
  ldr r3, =_sidata
 8002c38:	08002ef4 	.word	0x08002ef4
  ldr r0, =_sdata
 8002c3c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002c40:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8002c44:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8002c48:	200000d0 	.word	0x200000d0

08002c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c4c:	e7fe      	b.n	8002c4c <ADC1_2_IRQHandler>
	...

08002c50 <__libc_init_array>:
 8002c50:	b570      	push	{r4, r5, r6, lr}
 8002c52:	2500      	movs	r5, #0
 8002c54:	4e0c      	ldr	r6, [pc, #48]	; (8002c88 <__libc_init_array+0x38>)
 8002c56:	4c0d      	ldr	r4, [pc, #52]	; (8002c8c <__libc_init_array+0x3c>)
 8002c58:	1ba4      	subs	r4, r4, r6
 8002c5a:	10a4      	asrs	r4, r4, #2
 8002c5c:	42a5      	cmp	r5, r4
 8002c5e:	d109      	bne.n	8002c74 <__libc_init_array+0x24>
 8002c60:	f000 f822 	bl	8002ca8 <_init>
 8002c64:	2500      	movs	r5, #0
 8002c66:	4e0a      	ldr	r6, [pc, #40]	; (8002c90 <__libc_init_array+0x40>)
 8002c68:	4c0a      	ldr	r4, [pc, #40]	; (8002c94 <__libc_init_array+0x44>)
 8002c6a:	1ba4      	subs	r4, r4, r6
 8002c6c:	10a4      	asrs	r4, r4, #2
 8002c6e:	42a5      	cmp	r5, r4
 8002c70:	d105      	bne.n	8002c7e <__libc_init_array+0x2e>
 8002c72:	bd70      	pop	{r4, r5, r6, pc}
 8002c74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c78:	4798      	blx	r3
 8002c7a:	3501      	adds	r5, #1
 8002c7c:	e7ee      	b.n	8002c5c <__libc_init_array+0xc>
 8002c7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c82:	4798      	blx	r3
 8002c84:	3501      	adds	r5, #1
 8002c86:	e7f2      	b.n	8002c6e <__libc_init_array+0x1e>
 8002c88:	08002eec 	.word	0x08002eec
 8002c8c:	08002eec 	.word	0x08002eec
 8002c90:	08002eec 	.word	0x08002eec
 8002c94:	08002ef0 	.word	0x08002ef0

08002c98 <memset>:
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4402      	add	r2, r0
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d100      	bne.n	8002ca2 <memset+0xa>
 8002ca0:	4770      	bx	lr
 8002ca2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ca6:	e7f9      	b.n	8002c9c <memset+0x4>

08002ca8 <_init>:
 8002ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002caa:	bf00      	nop
 8002cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cae:	bc08      	pop	{r3}
 8002cb0:	469e      	mov	lr, r3
 8002cb2:	4770      	bx	lr

08002cb4 <_fini>:
 8002cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb6:	bf00      	nop
 8002cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cba:	bc08      	pop	{r3}
 8002cbc:	469e      	mov	lr, r3
 8002cbe:	4770      	bx	lr
